{"ast":null,"code":"// Utility functions for geolocation calculations\n/**\n * Calculate distance between two coordinates using Haversine formula\n * @param {Object} p1 - First point {lat, lng}\n * @param {Object} p2 - Second point {lat, lng}\n * @returns {number} Distance in meters\n */export function distanceBetween(p1,p2){const R=6371e3;// Earth radius in meters\nconst φ1=p1.lat*Math.PI/180;const φ2=p2.lat*Math.PI/180;const Δφ=(p2.lat-p1.lat)*Math.PI/180;const Δλ=(p2.lng-p1.lng)*Math.PI/180;const a=Math.sin(Δφ/2)*Math.sin(Δφ/2)+Math.cos(φ1)*Math.cos(φ2)*Math.sin(Δλ/2)*Math.sin(Δλ/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;// Distance in meters\n}/**\n * Check if user has moved significantly from last known position\n * @param {Object} currentCoords - Current coordinates {lat, lng}\n * @param {Object} lastCoords - Last known coordinates {lat, lng}\n * @param {number} threshold - Minimum distance in meters to consider significant movement\n * @returns {boolean} True if movement is significant\n */export function hasSignificantMovement(currentCoords,lastCoords){let threshold=arguments.length>2&&arguments[2]!==undefined?arguments[2]:200;if(!lastCoords)return true;const distance=distanceBetween(currentCoords,lastCoords);return distance>threshold;}/**\n * Format distance for display\n * @param {number} meters - Distance in meters\n * @returns {string} Formatted distance string\n */export function formatDistance(meters){if(meters<1000){return\"\".concat(Math.round(meters),\"m\");}else{return\"\".concat((meters/1000).toFixed(1),\"km\");}}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}