{"ast":null,"code":"import _objectSpread from\"C:/Users/PERSONAL/Downloads/tugood tugo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// API Service para TuGood TuGo - Versi贸n con Mock API Fallback\nimport{mockApiService}from'./mockApi';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';let USE_MOCK_API=true;// Activar mock API por defecto para producci贸n\n/**\n * Realiza petici贸n con fallback a mock API\n */const apiRequest=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(USE_MOCK_API){return await handleMockRequest(endpoint,options);}const url=\"\".concat(API_BASE_URL).concat(endpoint);const config=_objectSpread({headers:_objectSpread({'Content-Type':'application/json'},options.headers)},options);try{const response=await fetch(url,config);if(!response.ok){throw new Error(\"HTTP \".concat(response.status));}return await response.json();}catch(error){console.warn(\"API Error (\".concat(endpoint,\"), usando mock:\"),error);USE_MOCK_API=true;return await handleMockRequest(endpoint,options);}};/**\n * Maneja peticiones mock\n */const handleMockRequest=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const method=options.method||'GET';const body=options.body?JSON.parse(options.body):{};if(endpoint==='/auth/register'&&method==='POST'){return await mockApiService.register(body);}if(endpoint==='/auth/login'&&method==='POST'){return await mockApiService.login(body);}if(endpoint==='/auth/profile'&&method==='GET'){return await mockApiService.getProfile();}if(endpoint==='/comercios'&&method==='GET'){return await mockApiService.getComercios();}if(endpoint.startsWith('/comercios/')&&method==='GET'){const id=endpoint.split('/')[2];return await mockApiService.getComercio(id);}if(endpoint==='/packs'&&method==='GET'){return await mockApiService.getPacks();}if(endpoint.startsWith('/packs/')&&method==='GET'){const id=endpoint.split('/')[2];return await mockApiService.getPackById(id);}if(endpoint==='/pedidos'&&method==='GET'){return await mockApiService.getPedidos();}if(endpoint==='/pedidos'&&method==='POST'){return await mockApiService.createPedido(body);}return{success:true,message:'Mock API',data:{}};};// Auth API\nexport const authAPI={async register(userData){return await apiRequest('/auth/register',{method:'POST',body:JSON.stringify(userData)});},async login(credentials){const response=await apiRequest('/auth/login',{method:'POST',body:JSON.stringify(credentials)});if(response.success&&response.token){localStorage.setItem('tugood_token',response.token);localStorage.setItem('tugood_user',JSON.stringify(response.user));}return response;},async getProfile(){return await apiRequest('/auth/profile');},getCurrentUser(){try{const user=localStorage.getItem('tugood_user');return user?JSON.parse(user):null;}catch(_unused){return null;}},getToken(){return localStorage.getItem('tugood_token');},isAuthenticated(){const token=this.getToken();const user=this.getCurrentUser();console.log('Verificando autenticaci贸n - Token:',!!token,'User:',!!user);return!!(token&&user);},logout(){localStorage.removeItem('tugood_token');localStorage.removeItem('tugood_user');}};// Comercios API\nexport const comerciosAPI={async getAll(){let filtros=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const params=new URLSearchParams(filtros).toString();const endpoint=params?\"/comercios?\".concat(params):'/comercios';return await apiRequest(endpoint);},async getById(id){return await apiRequest(\"/comercios/\".concat(id));}};// Packs API\nexport const packsAPI={async getAll(){let comercioId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;const endpoint=comercioId?\"/packs?comercio_id=\".concat(comercioId):'/packs';return await apiRequest(endpoint);},async getById(id){return await apiRequest(\"/packs/\".concat(id));}};// Pedidos API\nexport const pedidosAPI={async getAll(){return await apiRequest('/pedidos');},async create(pedidoData){return await apiRequest('/pedidos',{method:'POST',body:JSON.stringify(pedidoData)});},async getById(id){return await apiRequest(\"/pedidos/\".concat(id));},async update(id,data){return await apiRequest(\"/pedidos/\".concat(id),{method:'PUT',body:JSON.stringify(data)});}};// Pagos API\nexport const pagosAPI={async getPaymentMethods(){return{success:true,metodos:[{id:'efectivo',nombre:'Efectivo',icono:'cash'},{id:'tarjeta',nombre:'Tarjeta',icono:'card'},{id:'nequi',nombre:'Nequi',icono:'mobile'}]};},async process(paymentData){await new Promise(resolve=>setTimeout(resolve,1000));return{success:true,message:'Pago procesado exitosamente',transactionId:'tx_'+Date.now()};}};// Users API\nexport const usersAPI={async getProfile(){return await mockApiService.getProfile();},async updateProfile(userData){return await mockApiService.updateProfile(userData);},async getStats(){return{success:true,stats:{pedidos_realizados:12,dinero_ahorrado:85000,comida_rescatada:8.5,co2_evitado:12.3}};}};// Export default para compatibilidad\nexport default{authAPI,comerciosAPI,packsAPI,pedidosAPI};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}