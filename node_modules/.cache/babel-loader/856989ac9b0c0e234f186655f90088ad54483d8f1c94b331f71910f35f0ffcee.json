{"ast":null,"code":"// Utility functions for geolocation calculations\n\n/**\n * Calculate distance between two coordinates using Haversine formula\n * @param {Object} p1 - First point {lat, lng}\n * @param {Object} p2 - Second point {lat, lng}\n * @returns {number} Distance in meters\n */\nexport function distanceBetween(p1, p2) {\n  const R = 6371e3; // Earth radius in meters\n  const φ1 = p1.lat * Math.PI / 180;\n  const φ2 = p2.lat * Math.PI / 180;\n  const Δφ = (p2.lat - p1.lat) * Math.PI / 180;\n  const Δλ = (p2.lng - p1.lng) * Math.PI / 180;\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in meters\n}\n\n/**\n * Check if user has moved significantly from last known position\n * @param {Object} currentCoords - Current coordinates {lat, lng}\n * @param {Object} lastCoords - Last known coordinates {lat, lng}\n * @param {number} threshold - Minimum distance in meters to consider significant movement\n * @returns {boolean} True if movement is significant\n */\nexport function hasSignificantMovement(currentCoords, lastCoords, threshold = 200) {\n  if (!lastCoords) return true;\n  const distance = distanceBetween(currentCoords, lastCoords);\n  return distance > threshold;\n}\n\n/**\n * Format distance for display\n * @param {number} meters - Distance in meters\n * @returns {string} Formatted distance string\n */\nexport function formatDistance(meters) {\n  if (meters < 1000) {\n    return `${Math.round(meters)}m`;\n  } else {\n    return `${(meters / 1000).toFixed(1)}km`;\n  }\n}","map":{"version":3,"names":["distanceBetween","p1","p2","R","φ1","lat","Math","PI","φ2","Δφ","Δλ","lng","a","sin","cos","c","atan2","sqrt","hasSignificantMovement","currentCoords","lastCoords","threshold","distance","formatDistance","meters","round","toFixed"],"sources":["C:/Users/PERSONAL/Downloads/tugood tugo/src/utils/geoUtils.js"],"sourcesContent":["// Utility functions for geolocation calculations\n\n/**\n * Calculate distance between two coordinates using Haversine formula\n * @param {Object} p1 - First point {lat, lng}\n * @param {Object} p2 - Second point {lat, lng}\n * @returns {number} Distance in meters\n */\nexport function distanceBetween(p1, p2) {\n  const R = 6371e3; // Earth radius in meters\n  const φ1 = p1.lat * Math.PI/180;\n  const φ2 = p2.lat * Math.PI/180;\n  const Δφ = (p2.lat - p1.lat) * Math.PI/180;\n  const Δλ = (p2.lng - p1.lng) * Math.PI/180;\n\n  const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n            Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ/2) * Math.sin(Δλ/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n  return R * c; // Distance in meters\n}\n\n/**\n * Check if user has moved significantly from last known position\n * @param {Object} currentCoords - Current coordinates {lat, lng}\n * @param {Object} lastCoords - Last known coordinates {lat, lng}\n * @param {number} threshold - Minimum distance in meters to consider significant movement\n * @returns {boolean} True if movement is significant\n */\nexport function hasSignificantMovement(currentCoords, lastCoords, threshold = 200) {\n  if (!lastCoords) return true;\n  \n  const distance = distanceBetween(currentCoords, lastCoords);\n  return distance > threshold;\n}\n\n/**\n * Format distance for display\n * @param {number} meters - Distance in meters\n * @returns {string} Formatted distance string\n */\nexport function formatDistance(meters) {\n  if (meters < 1000) {\n    return `${Math.round(meters)}m`;\n  } else {\n    return `${(meters / 1000).toFixed(1)}km`;\n  }\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACtC,MAAMC,CAAC,GAAG,MAAM,CAAC,CAAC;EAClB,MAAMC,EAAE,GAAGH,EAAE,CAACI,GAAG,GAAGC,IAAI,CAACC,EAAE,GAAC,GAAG;EAC/B,MAAMC,EAAE,GAAGN,EAAE,CAACG,GAAG,GAAGC,IAAI,CAACC,EAAE,GAAC,GAAG;EAC/B,MAAME,EAAE,GAAG,CAACP,EAAE,CAACG,GAAG,GAAGJ,EAAE,CAACI,GAAG,IAAIC,IAAI,CAACC,EAAE,GAAC,GAAG;EAC1C,MAAMG,EAAE,GAAG,CAACR,EAAE,CAACS,GAAG,GAAGV,EAAE,CAACU,GAAG,IAAIL,IAAI,CAACC,EAAE,GAAC,GAAG;EAE1C,MAAMK,CAAC,GAAGN,IAAI,CAACO,GAAG,CAACJ,EAAE,GAAC,CAAC,CAAC,GAAGH,IAAI,CAACO,GAAG,CAACJ,EAAE,GAAC,CAAC,CAAC,GAC/BH,IAAI,CAACQ,GAAG,CAACV,EAAE,CAAC,GAAGE,IAAI,CAACQ,GAAG,CAACN,EAAE,CAAC,GAC3BF,IAAI,CAACO,GAAG,CAACH,EAAE,GAAC,CAAC,CAAC,GAAGJ,IAAI,CAACO,GAAG,CAACH,EAAE,GAAC,CAAC,CAAC;EACzC,MAAMK,CAAC,GAAG,CAAC,GAAGT,IAAI,CAACU,KAAK,CAACV,IAAI,CAACW,IAAI,CAACL,CAAC,CAAC,EAAEN,IAAI,CAACW,IAAI,CAAC,CAAC,GAACL,CAAC,CAAC,CAAC;EAEtD,OAAOT,CAAC,GAAGY,CAAC,CAAC,CAAC;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,sBAAsBA,CAACC,aAAa,EAAEC,UAAU,EAAEC,SAAS,GAAG,GAAG,EAAE;EACjF,IAAI,CAACD,UAAU,EAAE,OAAO,IAAI;EAE5B,MAAME,QAAQ,GAAGtB,eAAe,CAACmB,aAAa,EAAEC,UAAU,CAAC;EAC3D,OAAOE,QAAQ,GAAGD,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAcA,CAACC,MAAM,EAAE;EACrC,IAAIA,MAAM,GAAG,IAAI,EAAE;IACjB,OAAO,GAAGlB,IAAI,CAACmB,KAAK,CAACD,MAAM,CAAC,GAAG;EACjC,CAAC,MAAM;IACL,OAAO,GAAG,CAACA,MAAM,GAAG,IAAI,EAAEE,OAAO,CAAC,CAAC,CAAC,IAAI;EAC1C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}