{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PERSONAL\\\\Downloads\\\\tugood tugo\\\\src\\\\pages\\\\LocationScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { MapPin, Navigation, LogOut, CheckCircle, RefreshCw } from 'lucide-react';\nimport useGeolocation from '../hooks/useGeolocation';\nimport PropTypes from 'prop-types';\nimport logger from '../utils/logger';\nimport '../styles/LocationScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationScreen = ({\n  user,\n  onLocationSelect,\n  onLogout\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const {\n    loading: geoLoading,\n    getCurrentPosition,\n    findClosestZone\n  } = useGeolocation();\n  const bogotaZones = [{\n    id: 1,\n    name: 'Chapinero',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.6351,\n      lng: -74.0669\n    }\n  }, {\n    id: 2,\n    name: 'Usaqu√©n',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.7110,\n      lng: -74.0721\n    }\n  }, {\n    id: 3,\n    name: 'Teusaquillo',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.6392,\n      lng: -74.0969\n    }\n  }, {\n    id: 4,\n    name: 'Kennedy',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.6280,\n      lng: -74.1372\n    }\n  }, {\n    id: 5,\n    name: 'Zona Rosa',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.6486,\n      lng: -74.0648\n    }\n  }, {\n    id: 6,\n    name: 'La Candelaria',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.5981,\n      lng: -74.0758\n    }\n  }, {\n    id: 7,\n    name: 'Suba',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.7569,\n      lng: -74.0776\n    }\n  }, {\n    id: 8,\n    name: 'Engativ√°',\n    country: 'Bogot√°',\n    coords: {\n      lat: 4.7110,\n      lng: -74.1469\n    }\n  }];\n  const [filteredCities, setFilteredCities] = useState(bogotaZones);\n  useEffect(() => {\n    if (searchTerm.trim()) {\n      const filtered = bogotaZones.filter(city => city.name.toLowerCase().includes(searchTerm.toLowerCase()) || city.country.toLowerCase().includes(searchTerm.toLowerCase()));\n      setFilteredCities(filtered);\n    } else {\n      setFilteredCities(bogotaZones);\n    }\n  }, [searchTerm]);\n  const handleCitySelect = city => {\n    setSelectedCity(city);\n  };\n  const navigate = useNavigate();\n  const handleConfirmLocation = () => {\n    if (selectedCity && !loading) {\n      logger.location('Confirmando ubicaci√≥n', selectedCity);\n      setLoading(true);\n\n      // Verificar que onLocationSelect existe\n      if (typeof onLocationSelect === 'function') {\n        // Mostrar mensaje de confirmaci√≥n\n        setShowConfirmation(true);\n\n        // Llamar a onLocationSelect inmediatamente para actualizar el estado\n        onLocationSelect(selectedCity);\n\n        // Esperar un momento para mostrar el mensaje, luego navegar\n        setTimeout(() => {\n          logger.location('Navegando a MainScreen');\n          navigate('/main');\n          setLoading(false);\n          setShowConfirmation(false);\n        }, 1500);\n      } else {\n        logger.error('onLocationSelect no es una funci√≥n', onLocationSelect);\n        setLoading(false);\n        alert('Error: No se puede procesar la ubicaci√≥n seleccionada.');\n      }\n    } else if (!selectedCity) {\n      alert('Por favor selecciona una zona antes de continuar.');\n    }\n  };\n  const handleUseCurrentLocation = async () => {\n    setLoading(true);\n    try {\n      logger.location('üîÑ Solicitando ubicaci√≥n GPS actual...');\n\n      // Obtener ubicaci√≥n r√°pida con configuraci√≥n optimizada\n      const position = await new Promise((resolve, reject) => {\n        if (!navigator.geolocation) {\n          reject(new Error('Tu navegador no soporta geolocalizaci√≥n'));\n          return;\n        }\n\n        // Primero intentar con configuraci√≥n r√°pida\n        navigator.geolocation.getCurrentPosition(position => {\n          logger.location('üìç Ubicaci√≥n GPS obtenida:', {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n            accuracy: position.coords.accuracy\n          });\n          resolve(position);\n        }, error => {\n          // Si falla, intentar con configuraci√≥n menos precisa pero m√°s r√°pida\n          navigator.geolocation.getCurrentPosition(position => {\n            logger.location('üìç Ubicaci√≥n obtenida (modo r√°pido):', {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n              accuracy: position.coords.accuracy\n            });\n            resolve(position);\n          }, fallbackError => {\n            let errorMessage = 'No se pudo obtener tu ubicaci√≥n GPS. ';\n            switch (fallbackError.code) {\n              case 1:\n                // PERMISSION_DENIED\n                errorMessage += 'Permisos denegados. Habilita la ubicaci√≥n en tu navegador.';\n                break;\n              case 2:\n                // POSITION_UNAVAILABLE\n                errorMessage += 'Ubicaci√≥n no disponible.';\n                break;\n              case 3:\n                // TIMEOUT\n                errorMessage += 'Tiempo de espera agotado.';\n                break;\n              default:\n                errorMessage += 'Error desconocido.';\n                break;\n            }\n            reject(new Error(errorMessage));\n          }, {\n            enableHighAccuracy: false,\n            // Modo r√°pido\n            timeout: 5000,\n            // 5 segundos\n            maximumAge: 300000 // Usar cache de 5 minutos\n          });\n        }, {\n          enableHighAccuracy: true,\n          // Intentar alta precisi√≥n primero\n          timeout: 8000,\n          // 8 segundos m√°ximo\n          maximumAge: 60000 // Cache de 1 minuto\n        });\n      });\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n\n      // Obtener direcci√≥n usando geocodificaci√≥n inversa (optimizada)\n      let address = 'Direcci√≥n no disponible';\n\n      // Hacer la geocodificaci√≥n en paralelo, no bloquear la UI\n      const geocodePromise = (async () => {\n        try {\n          logger.location('üîç Obteniendo direcci√≥n...');\n          const controller = new AbortController();\n          const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 segundos timeout\n\n          const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&language=es&region=CO&result_type=street_address|route`, {\n            signal: controller.signal\n          });\n          clearTimeout(timeoutId);\n          if (response.ok) {\n            const data = await response.json();\n            if (data.results && data.results.length > 0) {\n              const result = data.results[0];\n              address = result.formatted_address.replace(', Colombia', '').replace(', Bogot√°', '');\n              logger.location('üìç Direcci√≥n obtenida:', address);\n              return address;\n            }\n          }\n        } catch (error) {\n          if (error.name !== 'AbortError') {\n            logger.warn('Error obteniendo direcci√≥n:', error.message);\n          }\n        }\n        return 'Direcci√≥n no disponible';\n      })();\n\n      // Encontrar la zona m√°s cercana inmediatamente\n      const closestZone = findClosestZone(bogotaZones, latitude, longitude);\n      if (closestZone) {\n        // Crear el objeto de ubicaci√≥n inmediatamente\n        const currentLocationCity = {\n          id: 'current',\n          name: `${closestZone.name} (Tu ubicaci√≥n GPS)`,\n          country: 'Bogot√°',\n          coords: {\n            lat: latitude,\n            lng: longitude\n          },\n          accuracy: position.coords.accuracy,\n          timestamp: new Date().toISOString(),\n          address: 'Obteniendo direcci√≥n...' // Placeholder mientras se obtiene\n        };\n        logger.location('‚úÖ Ubicaci√≥n GPS configurada:', currentLocationCity);\n        setSelectedCity(currentLocationCity);\n\n        // Mostrar confirmaci√≥n inmediata\n        const precisionText = position.coords.accuracy <= 20 ? `üéØ Precisi√≥n: ${Math.round(position.coords.accuracy)}m (Excelente)` : position.coords.accuracy <= 50 ? `üéØ Precisi√≥n: ${Math.round(position.coords.accuracy)}m (Buena)` : `üéØ Precisi√≥n: ${Math.round(position.coords.accuracy)}m (Aproximada)`;\n        alert(`üìç Ubicaci√≥n GPS obtenida exitosamente!\\n\\nüìç Zona: ${closestZone.name}\\n${precisionText}\\nüè† Obteniendo direcci√≥n...`);\n\n        // Actualizar con la direcci√≥n cuando est√© lista (no bloquear)\n        geocodePromise.then(finalAddress => {\n          if (finalAddress !== 'Direcci√≥n no disponible') {\n            setSelectedCity(prev => ({\n              ...prev,\n              address: finalAddress\n            }));\n          } else {\n            setSelectedCity(prev => ({\n              ...prev,\n              address: 'Direcci√≥n no disponible'\n            }));\n          }\n        });\n      }\n    } catch (error) {\n      logger.error('‚ùå Error obteniendo ubicaci√≥n GPS:', error.message);\n\n      // Fallback to Chapinero if geolocation fails\n      const fallbackCity = {\n        id: 'fallback',\n        name: 'Chapinero (Zona por defecto)',\n        country: 'Bogot√°',\n        coords: {\n          lat: 4.6351,\n          lng: -74.0669\n        }\n      };\n      setSelectedCity(fallbackCity);\n      alert(error.message + '\\n\\nSe seleccion√≥ Chapinero como zona por defecto.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"location-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-btn\",\n          onClick: onLogout,\n          children: /*#__PURE__*/_jsxDEV(LogOut, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-info\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Hola, \", (user === null || user === void 0 ? void 0 : user.name) || 'Usuario']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"\\xBFD\\xF3nde est\\xE1s?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Selecciona tu ciudad para encontrar ofertas cercanas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary current-location-btn\",\n            onClick: handleUseCurrentLocation,\n            disabled: loading || geoLoading,\n            children: [/*#__PURE__*/_jsxDEV(Navigation, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), loading || geoLoading ? 'Obteniendo ubicaci√≥n GPS...' : 'Usar mi ubicaci√≥n actual']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary refresh-location-btn\",\n            onClick: handleUseCurrentLocation,\n            disabled: loading || geoLoading,\n            title: \"Obtener ubicaci\\xF3n GPS fresca\",\n            children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), loading || geoLoading ? 'Actualizando GPS...' : 'Actualizar ubicaci√≥n GPS']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-input-container\",\n            children: [/*#__PURE__*/_jsxDEV(MapPin, {\n              className: \"search-icon\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Buscar zona...\",\n              value: searchTerm,\n              onChange: e => setSearchTerm(e.target.value),\n              className: \"input search-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cities-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Zonas de Bogot\\xE1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cities-grid\",\n            children: filteredCities.map(city => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `city-card ${(selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.id) === city.id ? 'selected' : ''}`,\n              onClick: () => handleCitySelect(city),\n              children: [/*#__PURE__*/_jsxDEV(MapPin, {\n                size: 20,\n                className: \"city-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"city-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"city-name\",\n                  children: city.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"city-country\",\n                  children: city.country\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this)]\n            }, city.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), selectedCity && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-location\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selected-info\",\n            children: [/*#__PURE__*/_jsxDEV(MapPin, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: selectedCity.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: selectedCity.country\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 19\n              }, this), selectedCity.address && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `selected-address ${selectedCity.address === 'Obteniendo direcci√≥n...' ? 'loading' : ''}`,\n                children: [\"\\uD83D\\uDCCD \", selectedCity.address]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary confirm-btn\",\n            onClick: handleConfirmLocation,\n            disabled: loading,\n            children: loading ? 'Confirmando...' : 'Confirmar ubicaci√≥n'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this), showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"confirmation-content\",\n            children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n              size: 32,\n              className: \"confirmation-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\xA1Ubicaci\\xF3n confirmada!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-dots\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n\n// PropTypes validation\n_s(LocationScreen, \"M9s4l8FQFAadZmShUUGENwZrGj0=\", false, function () {\n  return [useGeolocation, useNavigate];\n});\n_c = LocationScreen;\nLocationScreen.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  }),\n  onLocationSelect: PropTypes.func.isRequired,\n  onLogout: PropTypes.func.isRequired\n};\nexport default LocationScreen;\nvar _c;\n$RefreshReg$(_c, \"LocationScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","MapPin","Navigation","LogOut","CheckCircle","RefreshCw","useGeolocation","PropTypes","logger","jsxDEV","_jsxDEV","LocationScreen","user","onLocationSelect","onLogout","_s","searchTerm","setSearchTerm","selectedCity","setSelectedCity","loading","setLoading","showConfirmation","setShowConfirmation","geoLoading","getCurrentPosition","findClosestZone","bogotaZones","id","name","country","coords","lat","lng","filteredCities","setFilteredCities","trim","filtered","filter","city","toLowerCase","includes","handleCitySelect","navigate","handleConfirmLocation","location","setTimeout","error","alert","handleUseCurrentLocation","position","Promise","resolve","reject","navigator","geolocation","Error","latitude","longitude","accuracy","fallbackError","errorMessage","code","enableHighAccuracy","timeout","maximumAge","address","geocodePromise","controller","AbortController","timeoutId","abort","response","fetch","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","signal","clearTimeout","ok","data","json","results","length","result","formatted_address","replace","warn","message","closestZone","currentLocationCity","timestamp","Date","toISOString","precisionText","Math","round","then","finalAddress","prev","fallbackCity","className","children","onClick","size","fileName","_jsxFileName","lineNumber","columnNumber","disabled","title","type","placeholder","value","onChange","e","target","map","_c","propTypes","shape","string","email","oneOfType","number","func","isRequired","$RefreshReg$"],"sources":["C:/Users/PERSONAL/Downloads/tugood tugo/src/pages/LocationScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { MapPin, Navigation, LogOut, CheckCircle, RefreshCw } from 'lucide-react';\nimport useGeolocation from '../hooks/useGeolocation';\nimport PropTypes from 'prop-types';\nimport logger from '../utils/logger';\nimport '../styles/LocationScreen.css';\n\nconst LocationScreen = ({ user, onLocationSelect, onLogout }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  \n  const { loading: geoLoading, getCurrentPosition, findClosestZone } = useGeolocation();\n\n  const bogotaZones = [\n    { id: 1, name: 'Chapinero', country: 'Bogot√°', coords: { lat: 4.6351, lng: -74.0669 } },\n    { id: 2, name: 'Usaqu√©n', country: 'Bogot√°', coords: { lat: 4.7110, lng: -74.0721 } },\n    { id: 3, name: 'Teusaquillo', country: 'Bogot√°', coords: { lat: 4.6392, lng: -74.0969 } },\n    { id: 4, name: 'Kennedy', country: 'Bogot√°', coords: { lat: 4.6280, lng: -74.1372 } },\n    { id: 5, name: 'Zona Rosa', country: 'Bogot√°', coords: { lat: 4.6486, lng: -74.0648 } },\n    { id: 6, name: 'La Candelaria', country: 'Bogot√°', coords: { lat: 4.5981, lng: -74.0758 } },\n    { id: 7, name: 'Suba', country: 'Bogot√°', coords: { lat: 4.7569, lng: -74.0776 } },\n    { id: 8, name: 'Engativ√°', country: 'Bogot√°', coords: { lat: 4.7110, lng: -74.1469 } }\n  ];\n\n  const [filteredCities, setFilteredCities] = useState(bogotaZones);\n\n  useEffect(() => {\n    if (searchTerm.trim()) {\n      const filtered = bogotaZones.filter(city =>\n        city.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        city.country.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      setFilteredCities(filtered);\n    } else {\n      setFilteredCities(bogotaZones);\n    }\n  }, [searchTerm]);\n\n  const handleCitySelect = (city) => {\n    setSelectedCity(city);\n  };\n\n  const navigate = useNavigate();\n\n  const handleConfirmLocation = () => {\n    if (selectedCity && !loading) {\n      logger.location('Confirmando ubicaci√≥n', selectedCity);\n      setLoading(true);\n      \n      // Verificar que onLocationSelect existe\n      if (typeof onLocationSelect === 'function') {\n        // Mostrar mensaje de confirmaci√≥n\n        setShowConfirmation(true);\n        \n        // Llamar a onLocationSelect inmediatamente para actualizar el estado\n        onLocationSelect(selectedCity);\n        \n        // Esperar un momento para mostrar el mensaje, luego navegar\n        setTimeout(() => {\n          logger.location('Navegando a MainScreen');\n          navigate('/main');\n          setLoading(false);\n          setShowConfirmation(false);\n        }, 1500);\n      } else {\n        logger.error('onLocationSelect no es una funci√≥n', onLocationSelect);\n        setLoading(false);\n        alert('Error: No se puede procesar la ubicaci√≥n seleccionada.');\n      }\n    } else if (!selectedCity) {\n      alert('Por favor selecciona una zona antes de continuar.');\n    }\n  };\n\n  const handleUseCurrentLocation = async () => {\n    setLoading(true);\n    \n    try {\n      logger.location('üîÑ Solicitando ubicaci√≥n GPS actual...');\n      \n      // Obtener ubicaci√≥n r√°pida con configuraci√≥n optimizada\n      const position = await new Promise((resolve, reject) => {\n        if (!navigator.geolocation) {\n          reject(new Error('Tu navegador no soporta geolocalizaci√≥n'));\n          return;\n        }\n\n        // Primero intentar con configuraci√≥n r√°pida\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            logger.location('üìç Ubicaci√≥n GPS obtenida:', {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n              accuracy: position.coords.accuracy\n            });\n            resolve(position);\n          },\n          (error) => {\n            // Si falla, intentar con configuraci√≥n menos precisa pero m√°s r√°pida\n            navigator.geolocation.getCurrentPosition(\n              (position) => {\n                logger.location('üìç Ubicaci√≥n obtenida (modo r√°pido):', {\n                  lat: position.coords.latitude,\n                  lng: position.coords.longitude,\n                  accuracy: position.coords.accuracy\n                });\n                resolve(position);\n              },\n              (fallbackError) => {\n                let errorMessage = 'No se pudo obtener tu ubicaci√≥n GPS. ';\n                switch(fallbackError.code) {\n                  case 1: // PERMISSION_DENIED\n                    errorMessage += 'Permisos denegados. Habilita la ubicaci√≥n en tu navegador.';\n                    break;\n                  case 2: // POSITION_UNAVAILABLE\n                    errorMessage += 'Ubicaci√≥n no disponible.';\n                    break;\n                  case 3: // TIMEOUT\n                    errorMessage += 'Tiempo de espera agotado.';\n                    break;\n                  default:\n                    errorMessage += 'Error desconocido.';\n                    break;\n                }\n                reject(new Error(errorMessage));\n              },\n              {\n                enableHighAccuracy: false, // Modo r√°pido\n                timeout: 5000,            // 5 segundos\n                maximumAge: 300000        // Usar cache de 5 minutos\n              }\n            );\n          },\n          {\n            enableHighAccuracy: true,  // Intentar alta precisi√≥n primero\n            timeout: 8000,            // 8 segundos m√°ximo\n            maximumAge: 60000         // Cache de 1 minuto\n          }\n        );\n      });\n\n      const { latitude, longitude } = position.coords;\n      \n      // Obtener direcci√≥n usando geocodificaci√≥n inversa (optimizada)\n      let address = 'Direcci√≥n no disponible';\n      \n      // Hacer la geocodificaci√≥n en paralelo, no bloquear la UI\n      const geocodePromise = (async () => {\n        try {\n          logger.location('üîç Obteniendo direcci√≥n...');\n          const controller = new AbortController();\n          const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 segundos timeout\n          \n          const response = await fetch(\n            `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&language=es&region=CO&result_type=street_address|route`,\n            { signal: controller.signal }\n          );\n          \n          clearTimeout(timeoutId);\n          \n          if (response.ok) {\n            const data = await response.json();\n            if (data.results && data.results.length > 0) {\n              const result = data.results[0];\n              address = result.formatted_address\n                .replace(', Colombia', '')\n                .replace(', Bogot√°', '');\n              logger.location('üìç Direcci√≥n obtenida:', address);\n              return address;\n            }\n          }\n        } catch (error) {\n          if (error.name !== 'AbortError') {\n            logger.warn('Error obteniendo direcci√≥n:', error.message);\n          }\n        }\n        return 'Direcci√≥n no disponible';\n      })();\n      \n      // Encontrar la zona m√°s cercana inmediatamente\n      const closestZone = findClosestZone(bogotaZones, latitude, longitude);\n      \n      if (closestZone) {\n        // Crear el objeto de ubicaci√≥n inmediatamente\n        const currentLocationCity = {\n          id: 'current',\n          name: `${closestZone.name} (Tu ubicaci√≥n GPS)`,\n          country: 'Bogot√°',\n          coords: { \n            lat: latitude, \n            lng: longitude \n          },\n          accuracy: position.coords.accuracy,\n          timestamp: new Date().toISOString(),\n          address: 'Obteniendo direcci√≥n...' // Placeholder mientras se obtiene\n        };\n        \n        logger.location('‚úÖ Ubicaci√≥n GPS configurada:', currentLocationCity);\n        setSelectedCity(currentLocationCity);\n        \n        // Mostrar confirmaci√≥n inmediata\n        const precisionText = position.coords.accuracy <= 20 ? \n          `üéØ Precisi√≥n: ${Math.round(position.coords.accuracy)}m (Excelente)` :\n          position.coords.accuracy <= 50 ?\n          `üéØ Precisi√≥n: ${Math.round(position.coords.accuracy)}m (Buena)` :\n          `üéØ Precisi√≥n: ${Math.round(position.coords.accuracy)}m (Aproximada)`;\n          \n        alert(`üìç Ubicaci√≥n GPS obtenida exitosamente!\\n\\nüìç Zona: ${closestZone.name}\\n${precisionText}\\nüè† Obteniendo direcci√≥n...`);\n        \n        // Actualizar con la direcci√≥n cuando est√© lista (no bloquear)\n        geocodePromise.then(finalAddress => {\n          if (finalAddress !== 'Direcci√≥n no disponible') {\n            setSelectedCity(prev => ({\n              ...prev,\n              address: finalAddress\n            }));\n          } else {\n            setSelectedCity(prev => ({\n              ...prev,\n              address: 'Direcci√≥n no disponible'\n            }));\n          }\n        });\n      }\n    } catch (error) {\n      logger.error('‚ùå Error obteniendo ubicaci√≥n GPS:', error.message);\n      \n      // Fallback to Chapinero if geolocation fails\n      const fallbackCity = {\n        id: 'fallback',\n        name: 'Chapinero (Zona por defecto)',\n        country: 'Bogot√°',\n        coords: { lat: 4.6351, lng: -74.0669 }\n      };\n      setSelectedCity(fallbackCity);\n      alert(error.message + '\\n\\nSe seleccion√≥ Chapinero como zona por defecto.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"location-screen\">\n      <div className=\"container\">\n        <div className=\"location-header\">\n          <button className=\"back-btn\" onClick={onLogout}>\n            <LogOut size={24} />\n          </button>\n          <div className=\"user-info\">\n            <span>Hola, {user?.name || 'Usuario'}</span>\n          </div>\n        </div>\n\n        <div className=\"location-content\">\n          <div className=\"location-title\">\n            <h1>¬øD√≥nde est√°s?</h1>\n            <p>Selecciona tu ciudad para encontrar ofertas cercanas</p>\n          </div>\n\n          <div className=\"location-actions\">\n            <button \n              className=\"btn btn-primary current-location-btn\"\n              onClick={handleUseCurrentLocation}\n              disabled={loading || geoLoading}\n            >\n              <Navigation size={20} />\n              {(loading || geoLoading) ? 'Obteniendo ubicaci√≥n GPS...' : 'Usar mi ubicaci√≥n actual'}\n            </button>\n          </div>\n\n          <div className=\"location-actions\">\n            <button \n              className=\"btn btn-secondary refresh-location-btn\"\n              onClick={handleUseCurrentLocation}\n              disabled={loading || geoLoading}\n              title=\"Obtener ubicaci√≥n GPS fresca\"\n            >\n              <RefreshCw size={20} />\n              {(loading || geoLoading) ? 'Actualizando GPS...' : 'Actualizar ubicaci√≥n GPS'}\n            </button>\n          </div>\n\n          <div className=\"search-section\">\n            <div className=\"search-input-container\">\n              <MapPin className=\"search-icon\" size={20} />\n              <input\n                type=\"text\"\n                placeholder=\"Buscar zona...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"input search-input\"\n              />\n            </div>\n          </div>\n\n          <div className=\"cities-section\">\n            <h3>Zonas de Bogot√°</h3>\n            <div className=\"cities-grid\">\n              {filteredCities.map((city) => (\n                <button\n                  key={city.id}\n                  className={`city-card ${selectedCity?.id === city.id ? 'selected' : ''}`}\n                  onClick={() => handleCitySelect(city)}\n                >\n                  <MapPin size={20} className=\"city-icon\" />\n                  <div className=\"city-info\">\n                    <span className=\"city-name\">{city.name}</span>\n                    <span className=\"city-country\">{city.country}</span>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {selectedCity && (\n            <div className=\"selected-location\">\n              <div className=\"selected-info\">\n                <MapPin size={20} />\n                <div>\n                  <strong>{selectedCity.name}</strong>\n                  <span>{selectedCity.country}</span>\n                  {selectedCity.address && (\n                    <span className={`selected-address ${selectedCity.address === 'Obteniendo direcci√≥n...' ? 'loading' : ''}`}>\n                      üìç {selectedCity.address}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <button \n                className=\"btn btn-primary confirm-btn\"\n                onClick={handleConfirmLocation}\n                disabled={loading}\n              >\n                {loading ? 'Confirmando...' : 'Confirmar ubicaci√≥n'}\n              </button>\n            </div>\n          )}\n\n          {/* Confirmation Message */}\n          {showConfirmation && (\n            <div className=\"confirmation-message\">\n              <div className=\"confirmation-content\">\n                <CheckCircle size={32} className=\"confirmation-icon\" />\n                <h3>¬°Ubicaci√≥n confirmada!</h3>\n                <p>{selectedCity?.name}</p>\n                <div className=\"loading-dots\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// PropTypes validation\nLocationScreen.propTypes = {\r\n  user: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    email: PropTypes.string,\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n  }),\r\n  onLocationSelect: PropTypes.func.isRequired,\r\n  onLogout: PropTypes.func.isRequired\r\n};\r\n\r\nexport default LocationScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,EAAEC,UAAU,EAAEC,MAAM,EAAEC,WAAW,EAAEC,SAAS,QAAQ,cAAc;AACjF,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,IAAI;EAAEC,gBAAgB;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAM;IAAEsB,OAAO,EAAEI,UAAU;IAAEC,kBAAkB;IAAEC;EAAgB,CAAC,GAAGpB,cAAc,CAAC,CAAC;EAErF,MAAMqB,WAAW,GAAG,CAClB;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,WAAW;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,EACvF;IAAEL,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,SAAS;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,EACrF;IAAEL,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,aAAa;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,EACzF;IAAEL,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,SAAS;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,EACrF;IAAEL,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,WAAW;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,EACvF;IAAEL,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,eAAe;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,EAC3F;IAAEL,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,MAAM;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,EAClF;IAAEL,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,UAAU;IAAEC,OAAO,EAAE,QAAQ;IAAEC,MAAM,EAAE;MAAEC,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAAE,CAAC,CACvF;EAED,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC6B,WAAW,CAAC;EAEjE5B,SAAS,CAAC,MAAM;IACd,IAAIiB,UAAU,CAACoB,IAAI,CAAC,CAAC,EAAE;MACrB,MAAMC,QAAQ,GAAGV,WAAW,CAACW,MAAM,CAACC,IAAI,IACtCA,IAAI,CAACV,IAAI,CAACW,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACzB,UAAU,CAACwB,WAAW,CAAC,CAAC,CAAC,IAC1DD,IAAI,CAACT,OAAO,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACzB,UAAU,CAACwB,WAAW,CAAC,CAAC,CAC9D,CAAC;MACDL,iBAAiB,CAACE,QAAQ,CAAC;IAC7B,CAAC,MAAM;MACLF,iBAAiB,CAACR,WAAW,CAAC;IAChC;EACF,CAAC,EAAE,CAACX,UAAU,CAAC,CAAC;EAEhB,MAAM0B,gBAAgB,GAAIH,IAAI,IAAK;IACjCpB,eAAe,CAACoB,IAAI,CAAC;EACvB,CAAC;EAED,MAAMI,QAAQ,GAAG3C,WAAW,CAAC,CAAC;EAE9B,MAAM4C,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI1B,YAAY,IAAI,CAACE,OAAO,EAAE;MAC5BZ,MAAM,CAACqC,QAAQ,CAAC,uBAAuB,EAAE3B,YAAY,CAAC;MACtDG,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,IAAI,OAAOR,gBAAgB,KAAK,UAAU,EAAE;QAC1C;QACAU,mBAAmB,CAAC,IAAI,CAAC;;QAEzB;QACAV,gBAAgB,CAACK,YAAY,CAAC;;QAE9B;QACA4B,UAAU,CAAC,MAAM;UACftC,MAAM,CAACqC,QAAQ,CAAC,wBAAwB,CAAC;UACzCF,QAAQ,CAAC,OAAO,CAAC;UACjBtB,UAAU,CAAC,KAAK,CAAC;UACjBE,mBAAmB,CAAC,KAAK,CAAC;QAC5B,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,MAAM;QACLf,MAAM,CAACuC,KAAK,CAAC,oCAAoC,EAAElC,gBAAgB,CAAC;QACpEQ,UAAU,CAAC,KAAK,CAAC;QACjB2B,KAAK,CAAC,wDAAwD,CAAC;MACjE;IACF,CAAC,MAAM,IAAI,CAAC9B,YAAY,EAAE;MACxB8B,KAAK,CAAC,mDAAmD,CAAC;IAC5D;EACF,CAAC;EAED,MAAMC,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C5B,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACFb,MAAM,CAACqC,QAAQ,CAAC,wCAAwC,CAAC;;MAEzD;MACA,MAAMK,QAAQ,GAAG,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtD,IAAI,CAACC,SAAS,CAACC,WAAW,EAAE;UAC1BF,MAAM,CAAC,IAAIG,KAAK,CAAC,yCAAyC,CAAC,CAAC;UAC5D;QACF;;QAEA;QACAF,SAAS,CAACC,WAAW,CAAC9B,kBAAkB,CACrCyB,QAAQ,IAAK;UACZ1C,MAAM,CAACqC,QAAQ,CAAC,4BAA4B,EAAE;YAC5Cb,GAAG,EAAEkB,QAAQ,CAACnB,MAAM,CAAC0B,QAAQ;YAC7BxB,GAAG,EAAEiB,QAAQ,CAACnB,MAAM,CAAC2B,SAAS;YAC9BC,QAAQ,EAAET,QAAQ,CAACnB,MAAM,CAAC4B;UAC5B,CAAC,CAAC;UACFP,OAAO,CAACF,QAAQ,CAAC;QACnB,CAAC,EACAH,KAAK,IAAK;UACT;UACAO,SAAS,CAACC,WAAW,CAAC9B,kBAAkB,CACrCyB,QAAQ,IAAK;YACZ1C,MAAM,CAACqC,QAAQ,CAAC,sCAAsC,EAAE;cACtDb,GAAG,EAAEkB,QAAQ,CAACnB,MAAM,CAAC0B,QAAQ;cAC7BxB,GAAG,EAAEiB,QAAQ,CAACnB,MAAM,CAAC2B,SAAS;cAC9BC,QAAQ,EAAET,QAAQ,CAACnB,MAAM,CAAC4B;YAC5B,CAAC,CAAC;YACFP,OAAO,CAACF,QAAQ,CAAC;UACnB,CAAC,EACAU,aAAa,IAAK;YACjB,IAAIC,YAAY,GAAG,uCAAuC;YAC1D,QAAOD,aAAa,CAACE,IAAI;cACvB,KAAK,CAAC;gBAAE;gBACND,YAAY,IAAI,4DAA4D;gBAC5E;cACF,KAAK,CAAC;gBAAE;gBACNA,YAAY,IAAI,0BAA0B;gBAC1C;cACF,KAAK,CAAC;gBAAE;gBACNA,YAAY,IAAI,2BAA2B;gBAC3C;cACF;gBACEA,YAAY,IAAI,oBAAoB;gBACpC;YACJ;YACAR,MAAM,CAAC,IAAIG,KAAK,CAACK,YAAY,CAAC,CAAC;UACjC,CAAC,EACD;YACEE,kBAAkB,EAAE,KAAK;YAAE;YAC3BC,OAAO,EAAE,IAAI;YAAa;YAC1BC,UAAU,EAAE,MAAM,CAAQ;UAC5B,CACF,CAAC;QACH,CAAC,EACD;UACEF,kBAAkB,EAAE,IAAI;UAAG;UAC3BC,OAAO,EAAE,IAAI;UAAa;UAC1BC,UAAU,EAAE,KAAK,CAAS;QAC5B,CACF,CAAC;MACH,CAAC,CAAC;MAEF,MAAM;QAAER,QAAQ;QAAEC;MAAU,CAAC,GAAGR,QAAQ,CAACnB,MAAM;;MAE/C;MACA,IAAImC,OAAO,GAAG,yBAAyB;;MAEvC;MACA,MAAMC,cAAc,GAAG,CAAC,YAAY;QAClC,IAAI;UACF3D,MAAM,CAACqC,QAAQ,CAAC,4BAA4B,CAAC;UAC7C,MAAMuB,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;UACxC,MAAMC,SAAS,GAAGxB,UAAU,CAAC,MAAMsB,UAAU,CAACG,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;UAE9D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4DAA4DhB,QAAQ,IAAIC,SAAS,QAAQgB,OAAO,CAACC,GAAG,CAACC,6BAA6B,yDAAyD,EAC3L;YAAEC,MAAM,EAAET,UAAU,CAACS;UAAO,CAC9B,CAAC;UAEDC,YAAY,CAACR,SAAS,CAAC;UAEvB,IAAIE,QAAQ,CAACO,EAAE,EAAE;YACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;YAClC,IAAID,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;cAC3C,MAAMC,MAAM,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;cAC9BhB,OAAO,GAAGkB,MAAM,CAACC,iBAAiB,CAC/BC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CACzBA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;cAC1B9E,MAAM,CAACqC,QAAQ,CAAC,wBAAwB,EAAEqB,OAAO,CAAC;cAClD,OAAOA,OAAO;YAChB;UACF;QACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;UACd,IAAIA,KAAK,CAAClB,IAAI,KAAK,YAAY,EAAE;YAC/BrB,MAAM,CAAC+E,IAAI,CAAC,6BAA6B,EAAExC,KAAK,CAACyC,OAAO,CAAC;UAC3D;QACF;QACA,OAAO,yBAAyB;MAClC,CAAC,EAAE,CAAC;;MAEJ;MACA,MAAMC,WAAW,GAAG/D,eAAe,CAACC,WAAW,EAAE8B,QAAQ,EAAEC,SAAS,CAAC;MAErE,IAAI+B,WAAW,EAAE;QACf;QACA,MAAMC,mBAAmB,GAAG;UAC1B9D,EAAE,EAAE,SAAS;UACbC,IAAI,EAAE,GAAG4D,WAAW,CAAC5D,IAAI,qBAAqB;UAC9CC,OAAO,EAAE,QAAQ;UACjBC,MAAM,EAAE;YACNC,GAAG,EAAEyB,QAAQ;YACbxB,GAAG,EAAEyB;UACP,CAAC;UACDC,QAAQ,EAAET,QAAQ,CAACnB,MAAM,CAAC4B,QAAQ;UAClCgC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UACnC3B,OAAO,EAAE,yBAAyB,CAAC;QACrC,CAAC;QAED1D,MAAM,CAACqC,QAAQ,CAAC,8BAA8B,EAAE6C,mBAAmB,CAAC;QACpEvE,eAAe,CAACuE,mBAAmB,CAAC;;QAEpC;QACA,MAAMI,aAAa,GAAG5C,QAAQ,CAACnB,MAAM,CAAC4B,QAAQ,IAAI,EAAE,GAClD,iBAAiBoC,IAAI,CAACC,KAAK,CAAC9C,QAAQ,CAACnB,MAAM,CAAC4B,QAAQ,CAAC,eAAe,GACpET,QAAQ,CAACnB,MAAM,CAAC4B,QAAQ,IAAI,EAAE,GAC9B,iBAAiBoC,IAAI,CAACC,KAAK,CAAC9C,QAAQ,CAACnB,MAAM,CAAC4B,QAAQ,CAAC,WAAW,GAChE,iBAAiBoC,IAAI,CAACC,KAAK,CAAC9C,QAAQ,CAACnB,MAAM,CAAC4B,QAAQ,CAAC,gBAAgB;QAEvEX,KAAK,CAAC,uDAAuDyC,WAAW,CAAC5D,IAAI,KAAKiE,aAAa,8BAA8B,CAAC;;QAE9H;QACA3B,cAAc,CAAC8B,IAAI,CAACC,YAAY,IAAI;UAClC,IAAIA,YAAY,KAAK,yBAAyB,EAAE;YAC9C/E,eAAe,CAACgF,IAAI,KAAK;cACvB,GAAGA,IAAI;cACPjC,OAAO,EAAEgC;YACX,CAAC,CAAC,CAAC;UACL,CAAC,MAAM;YACL/E,eAAe,CAACgF,IAAI,KAAK;cACvB,GAAGA,IAAI;cACPjC,OAAO,EAAE;YACX,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdvC,MAAM,CAACuC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAACyC,OAAO,CAAC;;MAEhE;MACA,MAAMY,YAAY,GAAG;QACnBxE,EAAE,EAAE,UAAU;QACdC,IAAI,EAAE,8BAA8B;QACpCC,OAAO,EAAE,QAAQ;QACjBC,MAAM,EAAE;UAAEC,GAAG,EAAE,MAAM;UAAEC,GAAG,EAAE,CAAC;QAAQ;MACvC,CAAC;MACDd,eAAe,CAACiF,YAAY,CAAC;MAC7BpD,KAAK,CAACD,KAAK,CAACyC,OAAO,GAAG,oDAAoD,CAAC;IAC7E,CAAC,SAAS;MACRnE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEX,OAAA;IAAK2F,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC9B5F,OAAA;MAAK2F,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB5F,OAAA;QAAK2F,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B5F,OAAA;UAAQ2F,SAAS,EAAC,UAAU;UAACE,OAAO,EAAEzF,QAAS;UAAAwF,QAAA,eAC7C5F,OAAA,CAACP,MAAM;YAACqG,IAAI,EAAE;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACTlG,OAAA;UAAK2F,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxB5F,OAAA;YAAA4F,QAAA,GAAM,QAAM,EAAC,CAAA1F,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,IAAI,KAAI,SAAS;UAAA;YAAA4E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENlG,OAAA;QAAK2F,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B5F,OAAA;UAAK2F,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B5F,OAAA;YAAA4F,QAAA,EAAI;UAAa;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtBlG,OAAA;YAAA4F,QAAA,EAAG;UAAoD;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,eAENlG,OAAA;UAAK2F,SAAS,EAAC,kBAAkB;UAAAC,QAAA,eAC/B5F,OAAA;YACE2F,SAAS,EAAC,sCAAsC;YAChDE,OAAO,EAAEtD,wBAAyB;YAClC4D,QAAQ,EAAEzF,OAAO,IAAII,UAAW;YAAA8E,QAAA,gBAEhC5F,OAAA,CAACR,UAAU;cAACsG,IAAI,EAAE;YAAG;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EACtBxF,OAAO,IAAII,UAAU,GAAI,6BAA6B,GAAG,0BAA0B;UAAA;YAAAiF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/E;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENlG,OAAA;UAAK2F,SAAS,EAAC,kBAAkB;UAAAC,QAAA,eAC/B5F,OAAA;YACE2F,SAAS,EAAC,wCAAwC;YAClDE,OAAO,EAAEtD,wBAAyB;YAClC4D,QAAQ,EAAEzF,OAAO,IAAII,UAAW;YAChCsF,KAAK,EAAC,iCAA8B;YAAAR,QAAA,gBAEpC5F,OAAA,CAACL,SAAS;cAACmG,IAAI,EAAE;YAAG;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EACrBxF,OAAO,IAAII,UAAU,GAAI,qBAAqB,GAAG,0BAA0B;UAAA;YAAAiF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENlG,OAAA;UAAK2F,SAAS,EAAC,gBAAgB;UAAAC,QAAA,eAC7B5F,OAAA;YAAK2F,SAAS,EAAC,wBAAwB;YAAAC,QAAA,gBACrC5F,OAAA,CAACT,MAAM;cAACoG,SAAS,EAAC,aAAa;cAACG,IAAI,EAAE;YAAG;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC5ClG,OAAA;cACEqG,IAAI,EAAC,MAAM;cACXC,WAAW,EAAC,gBAAgB;cAC5BC,KAAK,EAAEjG,UAAW;cAClBkG,QAAQ,EAAGC,CAAC,IAAKlG,aAAa,CAACkG,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;cAC/CZ,SAAS,EAAC;YAAoB;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENlG,OAAA;UAAK2F,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B5F,OAAA;YAAA4F,QAAA,EAAI;UAAe;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxBlG,OAAA;YAAK2F,SAAS,EAAC,aAAa;YAAAC,QAAA,EACzBpE,cAAc,CAACmF,GAAG,CAAE9E,IAAI,iBACvB7B,OAAA;cAEE2F,SAAS,EAAE,aAAa,CAAAnF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEU,EAAE,MAAKW,IAAI,CAACX,EAAE,GAAG,UAAU,GAAG,EAAE,EAAG;cACzE2E,OAAO,EAAEA,CAAA,KAAM7D,gBAAgB,CAACH,IAAI,CAAE;cAAA+D,QAAA,gBAEtC5F,OAAA,CAACT,MAAM;gBAACuG,IAAI,EAAE,EAAG;gBAACH,SAAS,EAAC;cAAW;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAC1ClG,OAAA;gBAAK2F,SAAS,EAAC,WAAW;gBAAAC,QAAA,gBACxB5F,OAAA;kBAAM2F,SAAS,EAAC,WAAW;kBAAAC,QAAA,EAAE/D,IAAI,CAACV;gBAAI;kBAAA4E,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eAC9ClG,OAAA;kBAAM2F,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAAE/D,IAAI,CAACT;gBAAO;kBAAA2E,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjD,CAAC;YAAA,GARDrE,IAAI,CAACX,EAAE;cAAA6E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OASN,CACT;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,EAEL1F,YAAY,iBACXR,OAAA;UAAK2F,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC5F,OAAA;YAAK2F,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5B5F,OAAA,CAACT,MAAM;cAACuG,IAAI,EAAE;YAAG;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACpBlG,OAAA;cAAA4F,QAAA,gBACE5F,OAAA;gBAAA4F,QAAA,EAASpF,YAAY,CAACW;cAAI;gBAAA4E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC,eACpClG,OAAA;gBAAA4F,QAAA,EAAOpF,YAAY,CAACY;cAAO;gBAAA2E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,EAClC1F,YAAY,CAACgD,OAAO,iBACnBxD,OAAA;gBAAM2F,SAAS,EAAE,oBAAoBnF,YAAY,CAACgD,OAAO,KAAK,yBAAyB,GAAG,SAAS,GAAG,EAAE,EAAG;gBAAAoC,QAAA,GAAC,eACvG,EAACpF,YAAY,CAACgD,OAAO;cAAA;gBAAAuC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpB,CACP;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACNlG,OAAA;YACE2F,SAAS,EAAC,6BAA6B;YACvCE,OAAO,EAAE3D,qBAAsB;YAC/BiE,QAAQ,EAAEzF,OAAQ;YAAAkF,QAAA,EAEjBlF,OAAO,GAAG,gBAAgB,GAAG;UAAqB;YAAAqF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CACN,EAGAtF,gBAAgB,iBACfZ,OAAA;UAAK2F,SAAS,EAAC,sBAAsB;UAAAC,QAAA,eACnC5F,OAAA;YAAK2F,SAAS,EAAC,sBAAsB;YAAAC,QAAA,gBACnC5F,OAAA,CAACN,WAAW;cAACoG,IAAI,EAAE,EAAG;cAACH,SAAS,EAAC;YAAmB;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvDlG,OAAA;cAAA4F,QAAA,EAAI;YAAsB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/BlG,OAAA;cAAA4F,QAAA,EAAIpF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEW;YAAI;cAAA4E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3BlG,OAAA;cAAK2F,SAAS,EAAC,cAAc;cAAAC,QAAA,gBAC3B5F,OAAA;gBAAA+F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eACblG,OAAA;gBAAA+F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eACblG,OAAA;gBAAA+F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACV,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAA7F,EAAA,CAlWMJ,cAAc;EAAA,QAMmDL,cAAc,EA+BlEN,WAAW;AAAA;AAAAsH,EAAA,GArCxB3G,cAAc;AAmWpBA,cAAc,CAAC4G,SAAS,GAAG;EACzB3G,IAAI,EAAEL,SAAS,CAACiH,KAAK,CAAC;IACpB3F,IAAI,EAAEtB,SAAS,CAACkH,MAAM;IACtBC,KAAK,EAAEnH,SAAS,CAACkH,MAAM;IACvB7F,EAAE,EAAErB,SAAS,CAACoH,SAAS,CAAC,CAACpH,SAAS,CAACkH,MAAM,EAAElH,SAAS,CAACqH,MAAM,CAAC;EAC9D,CAAC,CAAC;EACF/G,gBAAgB,EAAEN,SAAS,CAACsH,IAAI,CAACC,UAAU;EAC3ChH,QAAQ,EAAEP,SAAS,CAACsH,IAAI,CAACC;AAC3B,CAAC;AAED,eAAenH,cAAc;AAAC,IAAA2G,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}