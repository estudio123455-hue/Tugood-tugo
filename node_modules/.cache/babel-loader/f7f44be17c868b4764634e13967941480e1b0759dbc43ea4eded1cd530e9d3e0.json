{"ast":null,"code":"// Mock API para demostración - Simula backend completo\nexport const mockApi = {\n  // Datos de comercios demo\n  comercios: [{\n    id: 1,\n    nombre: 'Panadería El Buen Pan',\n    descripcion: 'Panadería artesanal con productos frescos del día',\n    direccion: 'Carrera 15 #93-47, Chapinero',\n    telefono: '+57 301 234 5678',\n    tipo_comida: 'Panadería',\n    zona: 'Chapinero',\n    calificacion: 4.5,\n    tiempo_entrega: '15-30 min',\n    costo_envio: 3000,\n    imagen: '/images/panaderia.jpg',\n    coordenadas: {\n      lat: 4.6533,\n      lng: -74.0621\n    },\n    horario: '6:00 AM - 8:00 PM',\n    activo: true,\n    packs: [{\n      id: 1,\n      nombre: 'Pack Desayuno Completo',\n      descripcion: 'Pan francés, croissant, jugo natural y café',\n      precio_original: 15000,\n      precio_oferta: 8000,\n      cantidad_disponible: 5,\n      fecha_vencimiento: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      imagen: '/images/pack-desayuno.jpg'\n    }, {\n      id: 3,\n      nombre: 'Pack Merienda Dulce',\n      descripcion: 'Torta, galletas y bebida caliente',\n      precio_original: 12000,\n      precio_oferta: 6000,\n      cantidad_disponible: 3,\n      fecha_vencimiento: new Date(Date.now() + 18 * 60 * 60 * 1000).toISOString(),\n      imagen: '/images/merienda.jpg'\n    }]\n  }, {\n    id: 2,\n    nombre: 'Restaurante Sabor Casero',\n    descripcion: 'Comida casera colombiana tradicional',\n    direccion: 'Calle 85 #15-20, Usaquén',\n    telefono: '+57 302 345 6789',\n    tipo_comida: 'Comida Casera',\n    zona: 'Usaquén',\n    calificacion: 4.3,\n    tiempo_entrega: '20-35 min',\n    costo_envio: 4000,\n    imagen: '/images/casero.jpg',\n    coordenadas: {\n      lat: 4.6796,\n      lng: -74.0593\n    },\n    horario: '11:00 AM - 9:00 PM',\n    activo: true,\n    packs: [{\n      id: 2,\n      nombre: 'Almuerzo Ejecutivo',\n      descripcion: 'Sopa, seco de cabrito, arroz, ensalada y jugo',\n      precio_original: 25000,\n      precio_oferta: 15000,\n      cantidad_disponible: 8,\n      fecha_vencimiento: new Date(Date.now() + 12 * 60 * 60 * 1000).toISOString(),\n      imagen: '/images/almuerzo.jpg'\n    }]\n  }, {\n    id: 3,\n    nombre: 'Pizzería Napoli',\n    descripcion: 'Pizzas artesanales al horno de leña',\n    direccion: 'Carrera 11 #85-32, Zona Rosa',\n    telefono: '+57 303 456 7890',\n    tipo_comida: 'Pizzería',\n    zona: 'Zona Rosa',\n    calificacion: 4.7,\n    tiempo_entrega: '25-40 min',\n    costo_envio: 5000,\n    imagen: '/images/pizzeria.jpg',\n    coordenadas: {\n      lat: 4.6736,\n      lng: -74.0574\n    },\n    horario: '5:00 PM - 11:00 PM',\n    activo: true,\n    packs: [{\n      id: 4,\n      nombre: 'Pack Pizza Familiar',\n      descripcion: 'Pizza grande + bebidas + postre',\n      precio_original: 45000,\n      precio_oferta: 28000,\n      cantidad_disponible: 4,\n      fecha_vencimiento: new Date(Date.now() + 8 * 60 * 60 * 1000).toISOString(),\n      imagen: '/images/pizza-pack.jpg'\n    }]\n  }],\n  // Datos de usuario demo\n  usuario: {\n    id: 'user_demo',\n    nombre: 'Usuario Demo',\n    email: 'demo@tugoodtugo.com',\n    telefono: '300-000-0000',\n    tipo: 'cliente',\n    ciudad: 'Bogotá'\n  },\n  // Pedidos demo\n  pedidos: [{\n    id: 'pedido_demo_1',\n    usuario_id: 'user_demo',\n    comercio_id: 1,\n    comercio_nombre: 'Panadería El Buen Pan',\n    comercio_direccion: 'Carrera 15 #93-47, Chapinero',\n    comercio_telefono: '+57 301 234 5678',\n    items: [{\n      pack_id: 1,\n      nombre: 'Pack Desayuno Completo',\n      cantidad: 1,\n      precio: 8000\n    }],\n    total: 8000,\n    estado: 'confirmado',\n    fecha_pedido: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n    fecha_recogida: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),\n    codigo_seguridad: 'A3X9K2',\n    metodo_pago: 'efectivo'\n  }, {\n    id: 'pedido_demo_2',\n    usuario_id: 'user_demo',\n    comercio_id: 2,\n    comercio_nombre: 'Restaurante Sabor Casero',\n    comercio_direccion: 'Calle 85 #15-20, Usaquén',\n    comercio_telefono: '+57 302 345 6789',\n    items: [{\n      pack_id: 2,\n      nombre: 'Almuerzo Ejecutivo',\n      cantidad: 1,\n      precio: 15000\n    }],\n    total: 15000,\n    estado: 'listo',\n    fecha_pedido: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n    fecha_recogida: new Date(Date.now() + 1 * 60 * 60 * 1000).toISOString(),\n    codigo_seguridad: 'B7Y4M9',\n    metodo_pago: 'tarjeta'\n  }]\n};\n\n// Simular delays de red\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nimport { sendRegistrationConfirmation, sendLoginConfirmation } from './emailService';\n\n// API Mock Functions\nexport const mockApiService = {\n  // Auth\n  async register(userData) {\n    await delay(800);\n    console.log('Mock API - Registrando usuario:', userData);\n\n    // Validar datos requeridos\n    if (!userData.nombre || !userData.email) {\n      return {\n        success: false,\n        message: 'Nombre y email son requeridos',\n        errors: {\n          nombre: !userData.nombre ? 'Nombre es requerido' : null,\n          email: !userData.email ? 'Email es requerido' : null\n        }\n      };\n    }\n    const newUser = {\n      id: 'user_' + Date.now(),\n      nombre: userData.nombre,\n      telefono: userData.telefono || '300-000-0000',\n      email: userData.email,\n      tipo: userData.tipo || 'cliente',\n      ciudad: 'Bogotá',\n      fecha_registro: new Date().toISOString()\n    };\n    console.log('Mock API - Usuario creado:', newUser);\n\n    // Guardar usuario en localStorage para persistencia\n    localStorage.setItem('tugood_user', JSON.stringify(newUser));\n    localStorage.setItem('tugood_token', 'jwt_token_' + Date.now());\n\n    // Enviar email de confirmación de registro\n    try {\n      const emailResult = await sendRegistrationConfirmation(newUser);\n      console.log('✅ Email de confirmación de registro enviado');\n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente. Revisa tu email para confirmar.',\n        user: newUser,\n        token: 'jwt_token_' + Date.now(),\n        requiresVerification: true,\n        emailResult: emailResult\n      };\n    } catch (error) {\n      console.error('❌ Error enviando email de confirmación:', error);\n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente. Revisa tu email para confirmar.',\n        user: newUser,\n        token: 'jwt_token_' + Date.now(),\n        requiresVerification: true,\n        emailResult: {\n          success: false,\n          email: newUser.email,\n          type: 'registration'\n        }\n      };\n    }\n  },\n  async login(credentials) {\n    await delay(600);\n\n    // Validar credenciales\n    if (!credentials.email || !credentials.password) {\n      return {\n        success: false,\n        message: 'Email y contraseña son requeridos',\n        errors: {\n          email: !credentials.email ? 'Email es requerido' : null,\n          password: !credentials.password ? 'Contraseña es requerida' : null\n        }\n      };\n    }\n\n    // Simular login exitoso para cualquier credencial\n    // Extraer nombre del email o usar un nombre genérico\n    const emailName = credentials.email.split('@')[0];\n    const displayName = emailName.charAt(0).toUpperCase() + emailName.slice(1);\n    const user = {\n      id: 'user_' + Date.now(),\n      nombre: displayName,\n      email: credentials.email,\n      telefono: '300-000-0000',\n      tipo: 'cliente',\n      ciudad: 'Bogotá'\n    };\n\n    // Guardar en localStorage\n    localStorage.setItem('tugood_user', JSON.stringify(user));\n    localStorage.setItem('tugood_token', 'jwt_token_demo');\n\n    // Enviar email de confirmación de login\n    try {\n      const emailResult = await sendLoginConfirmation(user);\n      console.log('✅ Email de confirmación de login enviado');\n      return {\n        success: true,\n        message: 'Login exitoso. Revisa tu email para confirmar el acceso.',\n        user: user,\n        token: 'jwt_token_demo',\n        requiresVerification: true,\n        emailResult: emailResult\n      };\n    } catch (error) {\n      console.error('❌ Error enviando email de confirmación de login:', error);\n      return {\n        success: true,\n        message: 'Login exitoso. Revisa tu email para confirmar el acceso.',\n        user: user,\n        token: 'jwt_token_demo',\n        requiresVerification: true,\n        emailResult: {\n          success: false,\n          email: user.email,\n          type: 'login'\n        }\n      };\n    }\n  },\n  // Comercios\n  async getComercios(filtros = {}) {\n    await delay(500);\n    let comercios = [...mockApi.comercios];\n\n    // Aplicar filtros\n    if (filtros.zona) {\n      comercios = comercios.filter(c => c.zona.toLowerCase().includes(filtros.zona.toLowerCase()));\n    }\n    if (filtros.tipo_comida) {\n      comercios = comercios.filter(c => c.tipo_comida.toLowerCase().includes(filtros.tipo_comida.toLowerCase()));\n    }\n    if (filtros.search) {\n      comercios = comercios.filter(c => c.nombre.toLowerCase().includes(filtros.search.toLowerCase()) || c.descripcion.toLowerCase().includes(filtros.search.toLowerCase()));\n    }\n    return {\n      success: true,\n      comercios,\n      total: comercios.length\n    };\n  },\n  async getComercio(id) {\n    await delay(300);\n    const comercio = mockApi.comercios.find(c => c.id === parseInt(id));\n    if (!comercio) {\n      throw new Error('Comercio no encontrado');\n    }\n    return {\n      success: true,\n      comercio\n    };\n  },\n  // Packs\n  async getPacks(comercioId = null) {\n    await delay(400);\n    let packs = [];\n    if (comercioId) {\n      const comercio = mockApi.comercios.find(c => c.id === parseInt(comercioId));\n      packs = comercio ? comercio.packs : [];\n    } else {\n      // Todos los packs\n      mockApi.comercios.forEach(comercio => {\n        packs.push(...comercio.packs.map(pack => ({\n          ...pack,\n          comercio_id: comercio.id,\n          comercio_nombre: comercio.nombre,\n          comercio_direccion: comercio.direccion,\n          comercio_telefono: comercio.telefono,\n          comercio_tipo: comercio.tipo_comida,\n          comercio_rating: comercio.calificacion\n        })));\n      });\n    }\n    return {\n      success: true,\n      packs,\n      total: packs.length\n    };\n  },\n  async getPackById(id) {\n    await delay(300);\n    let foundPack = null;\n\n    // Buscar el pack en todos los comercios\n    for (const comercio of mockApi.comercios) {\n      const pack = comercio.packs.find(p => p.id === parseInt(id));\n      if (pack) {\n        foundPack = {\n          ...pack,\n          comercio_id: comercio.id,\n          comercio_nombre: comercio.nombre,\n          comercio_direccion: comercio.direccion,\n          comercio_telefono: comercio.telefono,\n          comercio_tipo: comercio.tipo_comida,\n          comercio_rating: comercio.calificacion,\n          comercio_zona: comercio.zona,\n          comercio_horario: comercio.horario\n        };\n        break;\n      }\n    }\n    if (!foundPack) {\n      throw new Error('Pack no encontrado');\n    }\n    return {\n      success: true,\n      pack: foundPack\n    };\n  },\n  // Pedidos\n  async getPedidos() {\n    await delay(600);\n    return {\n      success: true,\n      pedidos: mockApi.pedidos,\n      total: mockApi.pedidos.length\n    };\n  },\n  async createPedido(pedidoData) {\n    await delay(800);\n    const nuevoPedido = {\n      id: 'pedido_' + Date.now(),\n      usuario_id: 'user_demo',\n      ...pedidoData,\n      estado: 'confirmado',\n      fecha_pedido: new Date().toISOString(),\n      codigo_seguridad: Math.random().toString(36).substring(2, 8).toUpperCase()\n    };\n    mockApi.pedidos.push(nuevoPedido);\n    return {\n      success: true,\n      message: 'Pedido creado exitosamente',\n      pedido: nuevoPedido\n    };\n  },\n  // Profile\n  async getProfile() {\n    await delay(300);\n\n    // Intentar obtener datos del usuario desde localStorage\n    const storedUser = localStorage.getItem('tugood_user');\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        return {\n          success: true,\n          user: userData\n        };\n      } catch (e) {\n        console.error('Error parsing stored user data:', e);\n      }\n    }\n\n    // Fallback a datos demo si no hay usuario almacenado\n    return {\n      success: true,\n      user: mockApi.usuario\n    };\n  },\n  async updateProfile(userData) {\n    await delay(500);\n\n    // Actualizar datos en localStorage si existe\n    const storedUser = localStorage.getItem('tugood_user');\n    if (storedUser) {\n      try {\n        const currentUser = JSON.parse(storedUser);\n        const updatedUser = {\n          ...currentUser,\n          ...userData\n        };\n        localStorage.setItem('tugood_user', JSON.stringify(updatedUser));\n        return {\n          success: true,\n          message: 'Perfil actualizado exitosamente',\n          user: updatedUser\n        };\n      } catch (e) {\n        console.error('Error updating stored user data:', e);\n      }\n    }\n\n    // Fallback: actualizar datos demo\n    Object.assign(mockApi.usuario, userData);\n    return {\n      success: true,\n      message: 'Perfil actualizado exitosamente',\n      user: mockApi.usuario\n    };\n  }\n};","map":{"version":3,"names":["mockApi","comercios","id","nombre","descripcion","direccion","telefono","tipo_comida","zona","calificacion","tiempo_entrega","costo_envio","imagen","coordenadas","lat","lng","horario","activo","packs","precio_original","precio_oferta","cantidad_disponible","fecha_vencimiento","Date","now","toISOString","usuario","email","tipo","ciudad","pedidos","usuario_id","comercio_id","comercio_nombre","comercio_direccion","comercio_telefono","items","pack_id","cantidad","precio","total","estado","fecha_pedido","fecha_recogida","codigo_seguridad","metodo_pago","delay","ms","Promise","resolve","setTimeout","sendRegistrationConfirmation","sendLoginConfirmation","mockApiService","register","userData","console","log","success","message","errors","newUser","fecha_registro","localStorage","setItem","JSON","stringify","emailResult","user","token","requiresVerification","error","type","login","credentials","password","emailName","split","displayName","charAt","toUpperCase","slice","getComercios","filtros","filter","c","toLowerCase","includes","search","length","getComercio","comercio","find","parseInt","Error","getPacks","comercioId","forEach","push","map","pack","comercio_tipo","comercio_rating","getPackById","foundPack","p","comercio_zona","comercio_horario","getPedidos","createPedido","pedidoData","nuevoPedido","Math","random","toString","substring","pedido","getProfile","storedUser","getItem","parse","e","updateProfile","currentUser","updatedUser","Object","assign"],"sources":["C:/Users/PERSONAL/Downloads/tugood tugo/src/services/mockApi.js"],"sourcesContent":["// Mock API para demostración - Simula backend completo\nexport const mockApi = {\n  // Datos de comercios demo\n  comercios: [\n    {\n      id: 1,\n      nombre: 'Panadería El Buen Pan',\n      descripcion: 'Panadería artesanal con productos frescos del día',\n      direccion: 'Carrera 15 #93-47, Chapinero',\n      telefono: '+57 301 234 5678',\n      tipo_comida: 'Panadería',\n      zona: 'Chapinero',\n      calificacion: 4.5,\n      tiempo_entrega: '15-30 min',\n      costo_envio: 3000,\n      imagen: '/images/panaderia.jpg',\n      coordenadas: { lat: 4.6533, lng: -74.0621 },\n      horario: '6:00 AM - 8:00 PM',\n      activo: true,\n      packs: [\n        {\n          id: 1,\n          nombre: 'Pack Desayuno Completo',\n          descripcion: 'Pan francés, croissant, jugo natural y café',\n          precio_original: 15000,\n          precio_oferta: 8000,\n          cantidad_disponible: 5,\n          fecha_vencimiento: new Date(Date.now() + 24*60*60*1000).toISOString(),\n          imagen: '/images/pack-desayuno.jpg'\n        },\n        {\n          id: 3,\n          nombre: 'Pack Merienda Dulce',\n          descripcion: 'Torta, galletas y bebida caliente',\n          precio_original: 12000,\n          precio_oferta: 6000,\n          cantidad_disponible: 3,\n          fecha_vencimiento: new Date(Date.now() + 18*60*60*1000).toISOString(),\n          imagen: '/images/merienda.jpg'\n        }\n      ]\n    },\n    {\n      id: 2,\n      nombre: 'Restaurante Sabor Casero',\n      descripcion: 'Comida casera colombiana tradicional',\n      direccion: 'Calle 85 #15-20, Usaquén',\n      telefono: '+57 302 345 6789',\n      tipo_comida: 'Comida Casera',\n      zona: 'Usaquén',\n      calificacion: 4.3,\n      tiempo_entrega: '20-35 min',\n      costo_envio: 4000,\n      imagen: '/images/casero.jpg',\n      coordenadas: { lat: 4.6796, lng: -74.0593 },\n      horario: '11:00 AM - 9:00 PM',\n      activo: true,\n      packs: [\n        {\n          id: 2,\n          nombre: 'Almuerzo Ejecutivo',\n          descripcion: 'Sopa, seco de cabrito, arroz, ensalada y jugo',\n          precio_original: 25000,\n          precio_oferta: 15000,\n          cantidad_disponible: 8,\n          fecha_vencimiento: new Date(Date.now() + 12*60*60*1000).toISOString(),\n          imagen: '/images/almuerzo.jpg'\n        }\n      ]\n    },\n    {\n      id: 3,\n      nombre: 'Pizzería Napoli',\n      descripcion: 'Pizzas artesanales al horno de leña',\n      direccion: 'Carrera 11 #85-32, Zona Rosa',\n      telefono: '+57 303 456 7890',\n      tipo_comida: 'Pizzería',\n      zona: 'Zona Rosa',\n      calificacion: 4.7,\n      tiempo_entrega: '25-40 min',\n      costo_envio: 5000,\n      imagen: '/images/pizzeria.jpg',\n      coordenadas: { lat: 4.6736, lng: -74.0574 },\n      horario: '5:00 PM - 11:00 PM',\n      activo: true,\n      packs: [\n        {\n          id: 4,\n          nombre: 'Pack Pizza Familiar',\n          descripcion: 'Pizza grande + bebidas + postre',\n          precio_original: 45000,\n          precio_oferta: 28000,\n          cantidad_disponible: 4,\n          fecha_vencimiento: new Date(Date.now() + 8*60*60*1000).toISOString(),\n          imagen: '/images/pizza-pack.jpg'\n        }\n      ]\n    }\n  ],\n\n  // Datos de usuario demo\n  usuario: {\n    id: 'user_demo',\n    nombre: 'Usuario Demo',\n    email: 'demo@tugoodtugo.com',\n    telefono: '300-000-0000',\n    tipo: 'cliente',\n    ciudad: 'Bogotá'\n  },\n\n  // Pedidos demo\n  pedidos: [\n    {\n      id: 'pedido_demo_1',\n      usuario_id: 'user_demo',\n      comercio_id: 1,\n      comercio_nombre: 'Panadería El Buen Pan',\n      comercio_direccion: 'Carrera 15 #93-47, Chapinero',\n      comercio_telefono: '+57 301 234 5678',\n      items: [\n        {\n          pack_id: 1,\n          nombre: 'Pack Desayuno Completo',\n          cantidad: 1,\n          precio: 8000\n        }\n      ],\n      total: 8000,\n      estado: 'confirmado',\n      fecha_pedido: new Date(Date.now() - 2*60*60*1000).toISOString(),\n      fecha_recogida: new Date(Date.now() + 2*60*60*1000).toISOString(),\n      codigo_seguridad: 'A3X9K2',\n      metodo_pago: 'efectivo'\n    },\n    {\n      id: 'pedido_demo_2',\n      usuario_id: 'user_demo',\n      comercio_id: 2,\n      comercio_nombre: 'Restaurante Sabor Casero',\n      comercio_direccion: 'Calle 85 #15-20, Usaquén',\n      comercio_telefono: '+57 302 345 6789',\n      items: [\n        {\n          pack_id: 2,\n          nombre: 'Almuerzo Ejecutivo',\n          cantidad: 1,\n          precio: 15000\n        }\n      ],\n      total: 15000,\n      estado: 'listo',\n      fecha_pedido: new Date(Date.now() - 1*60*60*1000).toISOString(),\n      fecha_recogida: new Date(Date.now() + 1*60*60*1000).toISOString(),\n      codigo_seguridad: 'B7Y4M9',\n      metodo_pago: 'tarjeta'\n    }\n  ]\n};\n\n// Simular delays de red\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nimport { sendRegistrationConfirmation, sendLoginConfirmation } from './emailService';\n\n// API Mock Functions\nexport const mockApiService = {\n  // Auth\n  async register(userData) {\n    await delay(800);\n    \n    console.log('Mock API - Registrando usuario:', userData);\n    \n    // Validar datos requeridos\n    if (!userData.nombre || !userData.email) {\n      return {\n        success: false,\n        message: 'Nombre y email son requeridos',\n        errors: {\n          nombre: !userData.nombre ? 'Nombre es requerido' : null,\n          email: !userData.email ? 'Email es requerido' : null\n        }\n      };\n    }\n\n    const newUser = {\n      id: 'user_' + Date.now(),\n      nombre: userData.nombre,\n      telefono: userData.telefono || '300-000-0000',\n      email: userData.email,\n      tipo: userData.tipo || 'cliente',\n      ciudad: 'Bogotá',\n      fecha_registro: new Date().toISOString()\n    };\n    \n    console.log('Mock API - Usuario creado:', newUser);\n    \n    // Guardar usuario en localStorage para persistencia\n    localStorage.setItem('tugood_user', JSON.stringify(newUser));\n    localStorage.setItem('tugood_token', 'jwt_token_' + Date.now());\n    \n    // Enviar email de confirmación de registro\n    try {\n      const emailResult = await sendRegistrationConfirmation(newUser);\n      console.log('✅ Email de confirmación de registro enviado');\n      \n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente. Revisa tu email para confirmar.',\n        user: newUser,\n        token: 'jwt_token_' + Date.now(),\n        requiresVerification: true,\n        emailResult: emailResult\n      };\n    } catch (error) {\n      console.error('❌ Error enviando email de confirmación:', error);\n      \n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente. Revisa tu email para confirmar.',\n        user: newUser,\n        token: 'jwt_token_' + Date.now(),\n        requiresVerification: true,\n        emailResult: { success: false, email: newUser.email, type: 'registration' }\n      };\n    }\n  },\n\n  async login(credentials) {\n    await delay(600);\n    \n    // Validar credenciales\n    if (!credentials.email || !credentials.password) {\n      return {\n        success: false,\n        message: 'Email y contraseña son requeridos',\n        errors: {\n          email: !credentials.email ? 'Email es requerido' : null,\n          password: !credentials.password ? 'Contraseña es requerida' : null\n        }\n      };\n    }\n\n    // Simular login exitoso para cualquier credencial\n    // Extraer nombre del email o usar un nombre genérico\n    const emailName = credentials.email.split('@')[0];\n    const displayName = emailName.charAt(0).toUpperCase() + emailName.slice(1);\n    \n    const user = {\n      id: 'user_' + Date.now(),\n      nombre: displayName,\n      email: credentials.email,\n      telefono: '300-000-0000',\n      tipo: 'cliente',\n      ciudad: 'Bogotá'\n    };\n    \n    // Guardar en localStorage\n    localStorage.setItem('tugood_user', JSON.stringify(user));\n    localStorage.setItem('tugood_token', 'jwt_token_demo');\n    \n    // Enviar email de confirmación de login\n    try {\n      const emailResult = await sendLoginConfirmation(user);\n      console.log('✅ Email de confirmación de login enviado');\n      \n      return {\n        success: true,\n        message: 'Login exitoso. Revisa tu email para confirmar el acceso.',\n        user: user,\n        token: 'jwt_token_demo',\n        requiresVerification: true,\n        emailResult: emailResult\n      };\n    } catch (error) {\n      console.error('❌ Error enviando email de confirmación de login:', error);\n      \n      return {\n        success: true,\n        message: 'Login exitoso. Revisa tu email para confirmar el acceso.',\n        user: user,\n        token: 'jwt_token_demo',\n        requiresVerification: true,\n        emailResult: { success: false, email: user.email, type: 'login' }\n      };\n    }\n  },\n\n  // Comercios\n  async getComercios(filtros = {}) {\n    await delay(500);\n    let comercios = [...mockApi.comercios];\n    \n    // Aplicar filtros\n    if (filtros.zona) {\n      comercios = comercios.filter(c => c.zona.toLowerCase().includes(filtros.zona.toLowerCase()));\n    }\n    if (filtros.tipo_comida) {\n      comercios = comercios.filter(c => c.tipo_comida.toLowerCase().includes(filtros.tipo_comida.toLowerCase()));\n    }\n    if (filtros.search) {\n      comercios = comercios.filter(c => \n        c.nombre.toLowerCase().includes(filtros.search.toLowerCase()) ||\n        c.descripcion.toLowerCase().includes(filtros.search.toLowerCase())\n      );\n    }\n\n    return {\n      success: true,\n      comercios,\n      total: comercios.length\n    };\n  },\n\n  async getComercio(id) {\n    await delay(300);\n    const comercio = mockApi.comercios.find(c => c.id === parseInt(id));\n    if (!comercio) {\n      throw new Error('Comercio no encontrado');\n    }\n    return {\n      success: true,\n      comercio\n    };\n  },\n\n  // Packs\n  async getPacks(comercioId = null) {\n    await delay(400);\n    let packs = [];\n    \n    if (comercioId) {\n      const comercio = mockApi.comercios.find(c => c.id === parseInt(comercioId));\n      packs = comercio ? comercio.packs : [];\n    } else {\n      // Todos los packs\n      mockApi.comercios.forEach(comercio => {\n        packs.push(...comercio.packs.map(pack => ({\n          ...pack,\n          comercio_id: comercio.id,\n          comercio_nombre: comercio.nombre,\n          comercio_direccion: comercio.direccion,\n          comercio_telefono: comercio.telefono,\n          comercio_tipo: comercio.tipo_comida,\n          comercio_rating: comercio.calificacion\n        })));\n      });\n    }\n\n    return {\n      success: true,\n      packs,\n      total: packs.length\n    };\n  },\n\n  async getPackById(id) {\n    await delay(300);\n    let foundPack = null;\n    \n    // Buscar el pack en todos los comercios\n    for (const comercio of mockApi.comercios) {\n      const pack = comercio.packs.find(p => p.id === parseInt(id));\n      if (pack) {\n        foundPack = {\n          ...pack,\n          comercio_id: comercio.id,\n          comercio_nombre: comercio.nombre,\n          comercio_direccion: comercio.direccion,\n          comercio_telefono: comercio.telefono,\n          comercio_tipo: comercio.tipo_comida,\n          comercio_rating: comercio.calificacion,\n          comercio_zona: comercio.zona,\n          comercio_horario: comercio.horario\n        };\n        break;\n      }\n    }\n\n    if (!foundPack) {\n      throw new Error('Pack no encontrado');\n    }\n\n    return {\n      success: true,\n      pack: foundPack\n    };\n  },\n\n  // Pedidos\n  async getPedidos() {\n    await delay(600);\n    return {\n      success: true,\n      pedidos: mockApi.pedidos,\n      total: mockApi.pedidos.length\n    };\n  },\n\n  async createPedido(pedidoData) {\n    await delay(800);\n    const nuevoPedido = {\n      id: 'pedido_' + Date.now(),\n      usuario_id: 'user_demo',\n      ...pedidoData,\n      estado: 'confirmado',\n      fecha_pedido: new Date().toISOString(),\n      codigo_seguridad: Math.random().toString(36).substring(2, 8).toUpperCase()\n    };\n    \n    mockApi.pedidos.push(nuevoPedido);\n    \n    return {\n      success: true,\n      message: 'Pedido creado exitosamente',\n      pedido: nuevoPedido\n    };\n  },\n\n  // Profile\n  async getProfile() {\n    await delay(300);\n    \n    // Intentar obtener datos del usuario desde localStorage\n    const storedUser = localStorage.getItem('tugood_user');\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        return {\n          success: true,\n          user: userData\n        };\n      } catch (e) {\n        console.error('Error parsing stored user data:', e);\n      }\n    }\n    \n    // Fallback a datos demo si no hay usuario almacenado\n    return {\n      success: true,\n      user: mockApi.usuario\n    };\n  },\n\n  async updateProfile(userData) {\n    await delay(500);\n    \n    // Actualizar datos en localStorage si existe\n    const storedUser = localStorage.getItem('tugood_user');\n    if (storedUser) {\n      try {\n        const currentUser = JSON.parse(storedUser);\n        const updatedUser = { ...currentUser, ...userData };\n        localStorage.setItem('tugood_user', JSON.stringify(updatedUser));\n        \n        return {\n          success: true,\n          message: 'Perfil actualizado exitosamente',\n          user: updatedUser\n        };\n      } catch (e) {\n        console.error('Error updating stored user data:', e);\n      }\n    }\n    \n    // Fallback: actualizar datos demo\n    Object.assign(mockApi.usuario, userData);\n    return {\n      success: true,\n      message: 'Perfil actualizado exitosamente',\n      user: mockApi.usuario\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}