{"ast":null,"code":"import _objectSpread from\"C:/Users/PERSONAL/Downloads/tugood tugo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// QR Utils - Sistema de Verificación Universal\n// Genera códigos QR con URLs públicas para verificación de pedidos\n// URL base de producción - cambiar por tu dominio\nconst BASE_URL='https://tugood-tugo.vercel.app';/**\n * Genera un token único para el pedido\n * @param {string} pedidoId - ID del pedido\n * @returns {string} Token único\n */export const generateQRToken=pedidoId=>{const timestamp=Date.now();const random=Math.random().toString(36).substring(2,15);return\"\".concat(timestamp,\"-\").concat(pedidoId,\"-\").concat(random);};/**\n * Genera un código de seguridad alfanumérico\n * @returns {string} Código de 6 caracteres\n */export const generateSecurityCode=()=>{const chars='ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';let result='';for(let i=0;i<6;i++){result+=chars.charAt(Math.floor(Math.random()*chars.length));}return result;};/**\n * Crea los datos completos para el QR\n * @param {Object} pedido - Datos del pedido\n * @returns {Object} Datos para el QR\n */export const createQRData=pedido=>{var _pedido$items;const token=generateQRToken(pedido.id);const securityCode=pedido.codigo_seguridad||generateSecurityCode();return{pedidoId:pedido.id,comercio:pedido.comercio_nombre,codigo:securityCode,total:pedido.total,token:token,timestamp:Date.now(),cliente:pedido.cliente_nombre||'Cliente',items:((_pedido$items=pedido.items)===null||_pedido$items===void 0?void 0:_pedido$items.length)||1,direccion:pedido.comercio_direccion,telefono:pedido.comercio_telefono};};/**\n * Genera la URL de verificación para el QR\n * @param {Object} qrData - Datos del QR\n * @returns {string} URL completa de verificación\n */export const generateVerificationURL=qrData=>{// Codificar datos en base64\nconst encodedData=btoa(JSON.stringify(qrData));return\"\".concat(BASE_URL,\"/verificar/\").concat(encodedData);};/**\n * Decodifica los datos del QR desde la URL\n * @param {string} encodedData - Datos codificados\n * @returns {Object|null} Datos decodificados o null si hay error\n */export const decodeQRData=encodedData=>{try{const decodedString=atob(encodedData);const data=JSON.parse(decodedString);return data;}catch(error){console.error('Error decodificando datos QR:',error);return null;}};/**\n * Valida si el QR es válido (no expirado)\n * @param {Object} qrData - Datos del QR\n * @param {number} maxAge - Edad máxima en horas (default: 24)\n * @returns {boolean} True si es válido\n */export const isValidQR=function(qrData){let maxAge=arguments.length>1&&arguments[1]!==undefined?arguments[1]:24;if(!qrData||!qrData.timestamp)return false;const now=Date.now();const maxAgeMs=maxAge*60*60*1000;// Convertir horas a ms\nreturn now-qrData.timestamp<maxAgeMs;};/**\n * Formatea el tiempo restante de validez del QR\n * @param {Object} qrData - Datos del QR\n * @returns {string} Tiempo restante formateado\n */export const getQRTimeRemaining=qrData=>{if(!qrData||!qrData.timestamp)return'Expirado';const now=Date.now();const maxAge=24*60*60*1000;// 24 horas\nconst timeLeft=maxAge-(now-qrData.timestamp);if(timeLeft<=0)return'Expirado';const hoursLeft=Math.floor(timeLeft/(60*60*1000));const minutesLeft=Math.floor(timeLeft%(60*60*1000)/(60*1000));if(hoursLeft>0){return\"\".concat(hoursLeft,\"h \").concat(minutesLeft,\"m\");}else{return\"\".concat(minutesLeft,\"m\");}};/**\n * Datos de ejemplo para testing\n */export const sampleQRData={pedidoId:'demo-001',comercio:'Supermercado Fresh',codigo:'A3X9K2',total:20000,token:generateQRToken('demo-001'),timestamp:Date.now(),cliente:'Usuario Demo',items:1,direccion:'Calle 85 #12-34, Zona Rosa',telefono:'+57 302 345 6789'};// Función helper para testing\nexport const generateSampleQR=()=>{const data=_objectSpread(_objectSpread({},sampleQRData),{},{token:generateQRToken('demo-001'),timestamp:Date.now()});return generateVerificationURL(data);};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}