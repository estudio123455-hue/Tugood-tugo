{"ast":null,"code":"// QR Utils - Sistema de Verificación Universal\n// Genera códigos QR con URLs públicas para verificación de pedidos\n\n// URL base de producción - cambiar por tu dominio\nconst BASE_URL = 'https://tugood-tugo.vercel.app';\n\n/**\n * Genera un token único para el pedido\n * @param {string} pedidoId - ID del pedido\n * @returns {string} Token único\n */\nexport const generateQRToken = pedidoId => {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substring(2, 15);\n  return `${timestamp}-${pedidoId}-${random}`;\n};\n\n/**\n * Genera un código de seguridad alfanumérico\n * @returns {string} Código de 6 caracteres\n */\nexport const generateSecurityCode = () => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < 6; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n};\n\n/**\n * Crea los datos completos para el QR\n * @param {Object} pedido - Datos del pedido\n * @returns {Object} Datos para el QR\n */\nexport const createQRData = pedido => {\n  var _pedido$items;\n  const token = generateQRToken(pedido.id);\n  const securityCode = pedido.codigo_seguridad || generateSecurityCode();\n  return {\n    pedidoId: pedido.id,\n    comercio: pedido.comercio_nombre,\n    codigo: securityCode,\n    total: pedido.total,\n    token: token,\n    timestamp: Date.now(),\n    cliente: pedido.cliente_nombre || 'Cliente',\n    items: ((_pedido$items = pedido.items) === null || _pedido$items === void 0 ? void 0 : _pedido$items.length) || 1,\n    direccion: pedido.comercio_direccion,\n    telefono: pedido.comercio_telefono\n  };\n};\n\n/**\n * Genera la URL de verificación para el QR\n * @param {Object} qrData - Datos del QR\n * @returns {string} URL completa de verificación\n */\nexport const generateVerificationURL = qrData => {\n  // Codificar datos en base64\n  const encodedData = btoa(JSON.stringify(qrData));\n  return `${BASE_URL}/verificar/${encodedData}`;\n};\n\n/**\n * Decodifica los datos del QR desde la URL\n * @param {string} encodedData - Datos codificados\n * @returns {Object|null} Datos decodificados o null si hay error\n */\nexport const decodeQRData = encodedData => {\n  try {\n    const decodedString = atob(encodedData);\n    const data = JSON.parse(decodedString);\n    return data;\n  } catch (error) {\n    console.error('Error decodificando datos QR:', error);\n    return null;\n  }\n};\n\n/**\n * Valida si el QR es válido (no expirado)\n * @param {Object} qrData - Datos del QR\n * @param {number} maxAge - Edad máxima en horas (default: 24)\n * @returns {boolean} True si es válido\n */\nexport const isValidQR = (qrData, maxAge = 24) => {\n  if (!qrData || !qrData.timestamp) return false;\n  const now = Date.now();\n  const maxAgeMs = maxAge * 60 * 60 * 1000; // Convertir horas a ms\n\n  return now - qrData.timestamp < maxAgeMs;\n};\n\n/**\n * Formatea el tiempo restante de validez del QR\n * @param {Object} qrData - Datos del QR\n * @returns {string} Tiempo restante formateado\n */\nexport const getQRTimeRemaining = qrData => {\n  if (!qrData || !qrData.timestamp) return 'Expirado';\n  const now = Date.now();\n  const maxAge = 24 * 60 * 60 * 1000; // 24 horas\n  const timeLeft = maxAge - (now - qrData.timestamp);\n  if (timeLeft <= 0) return 'Expirado';\n  const hoursLeft = Math.floor(timeLeft / (60 * 60 * 1000));\n  const minutesLeft = Math.floor(timeLeft % (60 * 60 * 1000) / (60 * 1000));\n  if (hoursLeft > 0) {\n    return `${hoursLeft}h ${minutesLeft}m`;\n  } else {\n    return `${minutesLeft}m`;\n  }\n};\n\n/**\n * Datos de ejemplo para testing\n */\nexport const sampleQRData = {\n  pedidoId: 'demo-001',\n  comercio: 'Supermercado Fresh',\n  codigo: 'A3X9K2',\n  total: 20000,\n  token: generateQRToken('demo-001'),\n  timestamp: Date.now(),\n  cliente: 'Usuario Demo',\n  items: 1,\n  direccion: 'Calle 85 #12-34, Zona Rosa',\n  telefono: '+57 302 345 6789'\n};\n\n// Función helper para testing\nexport const generateSampleQR = () => {\n  const data = {\n    ...sampleQRData,\n    token: generateQRToken('demo-001'),\n    timestamp: Date.now()\n  };\n  return generateVerificationURL(data);\n};","map":{"version":3,"names":["BASE_URL","generateQRToken","pedidoId","timestamp","Date","now","random","Math","toString","substring","generateSecurityCode","chars","result","i","charAt","floor","length","createQRData","pedido","_pedido$items","token","id","securityCode","codigo_seguridad","comercio","comercio_nombre","codigo","total","cliente","cliente_nombre","items","direccion","comercio_direccion","telefono","comercio_telefono","generateVerificationURL","qrData","encodedData","btoa","JSON","stringify","decodeQRData","decodedString","atob","data","parse","error","console","isValidQR","maxAge","maxAgeMs","getQRTimeRemaining","timeLeft","hoursLeft","minutesLeft","sampleQRData","generateSampleQR"],"sources":["C:/Users/PERSONAL/Downloads/tugood tugo/src/utils/qrUtils.js"],"sourcesContent":["// QR Utils - Sistema de Verificación Universal\n// Genera códigos QR con URLs públicas para verificación de pedidos\n\n// URL base de producción - cambiar por tu dominio\nconst BASE_URL = 'https://tugood-tugo.vercel.app';\n\n/**\n * Genera un token único para el pedido\n * @param {string} pedidoId - ID del pedido\n * @returns {string} Token único\n */\nexport const generateQRToken = (pedidoId) => {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substring(2, 15);\n  return `${timestamp}-${pedidoId}-${random}`;\n};\n\n/**\n * Genera un código de seguridad alfanumérico\n * @returns {string} Código de 6 caracteres\n */\nexport const generateSecurityCode = () => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < 6; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n};\n\n/**\n * Crea los datos completos para el QR\n * @param {Object} pedido - Datos del pedido\n * @returns {Object} Datos para el QR\n */\nexport const createQRData = (pedido) => {\n  const token = generateQRToken(pedido.id);\n  const securityCode = pedido.codigo_seguridad || generateSecurityCode();\n  \n  return {\n    pedidoId: pedido.id,\n    comercio: pedido.comercio_nombre,\n    codigo: securityCode,\n    total: pedido.total,\n    token: token,\n    timestamp: Date.now(),\n    cliente: pedido.cliente_nombre || 'Cliente',\n    items: pedido.items?.length || 1,\n    direccion: pedido.comercio_direccion,\n    telefono: pedido.comercio_telefono\n  };\n};\n\n/**\n * Genera la URL de verificación para el QR\n * @param {Object} qrData - Datos del QR\n * @returns {string} URL completa de verificación\n */\nexport const generateVerificationURL = (qrData) => {\n  // Codificar datos en base64\n  const encodedData = btoa(JSON.stringify(qrData));\n  return `${BASE_URL}/verificar/${encodedData}`;\n};\n\n/**\n * Decodifica los datos del QR desde la URL\n * @param {string} encodedData - Datos codificados\n * @returns {Object|null} Datos decodificados o null si hay error\n */\nexport const decodeQRData = (encodedData) => {\n  try {\n    const decodedString = atob(encodedData);\n    const data = JSON.parse(decodedString);\n    return data;\n  } catch (error) {\n    console.error('Error decodificando datos QR:', error);\n    return null;\n  }\n};\n\n/**\n * Valida si el QR es válido (no expirado)\n * @param {Object} qrData - Datos del QR\n * @param {number} maxAge - Edad máxima en horas (default: 24)\n * @returns {boolean} True si es válido\n */\nexport const isValidQR = (qrData, maxAge = 24) => {\n  if (!qrData || !qrData.timestamp) return false;\n  \n  const now = Date.now();\n  const maxAgeMs = maxAge * 60 * 60 * 1000; // Convertir horas a ms\n  \n  return (now - qrData.timestamp) < maxAgeMs;\n};\n\n/**\n * Formatea el tiempo restante de validez del QR\n * @param {Object} qrData - Datos del QR\n * @returns {string} Tiempo restante formateado\n */\nexport const getQRTimeRemaining = (qrData) => {\n  if (!qrData || !qrData.timestamp) return 'Expirado';\n  \n  const now = Date.now();\n  const maxAge = 24 * 60 * 60 * 1000; // 24 horas\n  const timeLeft = maxAge - (now - qrData.timestamp);\n  \n  if (timeLeft <= 0) return 'Expirado';\n  \n  const hoursLeft = Math.floor(timeLeft / (60 * 60 * 1000));\n  const minutesLeft = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));\n  \n  if (hoursLeft > 0) {\n    return `${hoursLeft}h ${minutesLeft}m`;\n  } else {\n    return `${minutesLeft}m`;\n  }\n};\n\n/**\n * Datos de ejemplo para testing\n */\nexport const sampleQRData = {\n  pedidoId: 'demo-001',\n  comercio: 'Supermercado Fresh',\n  codigo: 'A3X9K2',\n  total: 20000,\n  token: generateQRToken('demo-001'),\n  timestamp: Date.now(),\n  cliente: 'Usuario Demo',\n  items: 1,\n  direccion: 'Calle 85 #12-34, Zona Rosa',\n  telefono: '+57 302 345 6789'\n};\n\n// Función helper para testing\nexport const generateSampleQR = () => {\n  const data = { ...sampleQRData, token: generateQRToken('demo-001'), timestamp: Date.now() };\n  return generateVerificationURL(data);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}